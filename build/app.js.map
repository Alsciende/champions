{"version":3,"sources":["webpack:///app.js","webpack:///webpack/bootstrap e7091b8b7245dc2de1e8","webpack:///index.js","webpack:///./~/font-awesome-webpack/index.js","webpack:///./~/font-awesome-webpack/font-awesome.config.js?311b","webpack:///./~/font-awesome-webpack/font-awesome.config.js","webpack:///./~/font-awesome-webpack/~/css-loader/lib/css-base.js","webpack:///./~/font-awesome/fonts/fontawesome-webfont.eot","webpack:///./~/font-awesome/fonts/fontawesome-webfont.woff2","webpack:///./~/font-awesome/fonts/fontawesome-webfont.woff","webpack:///./~/font-awesome/fonts/fontawesome-webfont.ttf","webpack:///./~/font-awesome/fonts/fontawesome-webfont.svg","webpack:///./~/font-awesome-webpack/~/style-loader/addStyles.js","webpack:///./src/index.scss?c726","webpack:///./src/index.scss","webpack:///./src/fonts/hanzel-normal-webfont.eot","webpack:///./src/fonts/hanzel-normal-webfont.woff2","webpack:///./src/fonts/hanzel-normal-webfont.woff","webpack:///./src/fonts/hanzel-normal-webfont.ttf","webpack:///./src/fonts/hanzel-normal-webfont.svg","webpack:///./~/style-loader/addStyles.js","webpack:///champions.js","webpack:///Champion.js","webpack:///Model.js","webpack:///roster.js","webpack:///router.js","webpack:///./~/director/build/director.js","webpack:///App.jsx","webpack:///./src/view/app/App.scss?2f16","webpack:///./src/view/app/App.scss","webpack:///Navigation.jsx","webpack:///./src/view/app/Navigation.scss?d24f","webpack:///./src/view/app/Navigation.scss","webpack:///lang.js","webpack:///en.js","webpack:///es.js","webpack:///ru.js","webpack:///./~/mithril/mithril.js","webpack:///(webpack)/buildin/module.js","webpack:///Menu.jsx","webpack:///./src/view/app/Menu.scss?4cf6","webpack:///./src/view/app/Menu.scss","webpack:///Roster.jsx","webpack:///./src/view/page/Roster.scss?7ecd","webpack:///./src/view/page/Roster.scss","webpack:///Champion.jsx","webpack:///./src/view/Champion.scss?b93d","webpack:///./src/view/Champion.scss","webpack:///RosterAdd.jsx","webpack:///./src/view/page/RosterAdd.scss?5dc0","webpack:///./src/view/page/RosterAdd.scss","webpack:///Teams.jsx","webpack:///./src/view/page/Teams.scss?1ff6","webpack:///./src/view/page/Teams.scss","webpack:///Synergy.jsx","webpack:///./src/view/page/Synergy.scss?9927","webpack:///./src/view/page/Synergy.scss"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","i","Object","prototype","hasOwnProperty","_m","args","slice","fn","a","b","apply","this","concat","_interopRequireDefault","obj","__esModule","default","_champions","_app","_app2","_roster","_roster2","_router","_router2","_App","_App2","_Roster","_Roster2","_RosterAdd","_RosterAdd2","_Teams","_Teams2","_Synergy","_Synergy2","_mithril","_mithril2","on","setRoute","uids","uid","tab","redraw","pages","component","menu","header","title","icon","options","onclick","clear","stars","parseInt","selected","tabs","mount","document","body","init","addEventListener","content","locals","push","list","toString","result","length","item","join","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","createStyleElement","styleElement","createElement","head","getHeadElement","type","appendChild","createLinkElement","linkElement","rel","update","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","parentNode","removeChild","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","firstChild","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","memo","arguments","isOldIE","test","window","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","insertStyleElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","Error","removeStyleElement","idx","indexOf","splice","_toConsumableArray","arr","Array","isArray","arr2","from","defineProperty","value","undefined","_Champion","_Champion2","champions","typeId","map","champion","Set","attr","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_Model2","_Model3","Champion","_Model","_ref","pi","getPrototypeOf","_extends","assign","source","Model","defaults","definition","app","fromStorage","array","localStorage","string","getItem","parse","toStorage","object","setItem","all","roster","available","_champions2","rosterMap","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","addAll","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","add","find","_director","Router","dlocHashEmpty","dloc","hash","_every","_flatten","flat","n","_asyncEverySeries","callback","completed","iterate","paramifyString","str","params","mod","param","regifyString","matches","last","out","substr","match","replace","capture","captures","terminator","routes","delimiter","start","stop","left","right","chunk","tmp","location","listener","mode","history","check","h","onHashChanged","fire","onpopstate","onhashchange","onchange","onChangeEvent","l","listeners","documentMode","setTimeout","frame","style","display","writeFrame","attachEvent","event","propertyName","setInterval","destroy","setHash","s","pushState","f","getElementById","d","contentDocument","contentWindow","open","write","close","syncHash","_hash","methods","scope","_methods","_insert","insert","insertEx","historySupport","configure","r","routeTo","handler","newURL","url","getPath","dispatch","charAt","convert_hash_in_init","replaceState","run_in_init","explode","v","split","val","method","path","route","parent","once","getRoute","ret","pathname","QUERY_SEPARATOR","recurse","async","strict","notfound","resource","html5history","run_handler_in_init","every","after","before","token","matcher","compiled","RegExp","forEach","routesFn","updateAndInvoke","fns","invoke","runlist","traverse","invoked","_invoked","reverse","thisArg","regexp","filterRoutes","deepCopy","applyFilter","newRoutes","matched","current","exact","methodType","parentType","nested","shift","extend","extra","len","insertOrMount","local","rename","routeType","isRoute","_Navigation","_Navigation2","_Menu","_Menu2","App","view","currentPage","tag","children","attrs","className","_lang","_lang2","Navigation","ctrl","currentTab","buttons","handleClick","get","_en","_en2","_es","_es2","_ru","_ru2","lang","messages","en","es","ru","change","fallback","champion-blackbolt-name","champion-captainmarvel-name","champion-drax-name","champion-gamora-name","champion-msmarvel-name","champion-ronan-name","champion-spidermanblack-name","champion-superiorironman-name","champion-thor-name","champion-thorjanefoster-name","champion-venom-name","champion-ironman-name","champion-ironpatriot-name","champion-hulkbuster-name","champion-kang-name","champion-rocket-name","champion-starlord-name","champion-vision-name","champion-thevision-name","champion-ultron-name","champion-warmachine-name","champion-colossus-name","champion-cyclops-name","champion-deadpool-name","champion-deadpoolxforce-name","champion-magneto-name","champion-magnetomarvelnow-name","champion-storm-name","champion-wolverine-name","champion-blackpanther-name","champion-blackwidow-name","champion-daredevil-name","champion-daredevilnetflix-name","champion-elektra-name","champion-hawkeye-name","champion-moonknight-name","champion-punisher-name","champion-wintersoldier-name","champion-abomination-name","champion-antman-name","champion-captainamerica-name","champion-captainamericawwii-name","champion-electro-name","champion-hulk-name","champion-joefixit-name","champion-rhino-name","champion-spidergwen-name","champion-spiderman-name","champion-spidermanmorales-name","champion-yellowjacket-name","champion-drstrange-name","champion-ironfist-name","champion-guillotine-name","champion-juggernaut-name","champion-magik-name","champion-scarletwitch-name","champion-unstoppablecolossus-name","champion-captainmarvel-shortname","champion-spidermanblack-shortname","champion-superiorironman-shortname","champion-thorjanefoster-shortname","champion-rocket-shortname","champion-deadpoolxforce-shortname","champion-magnetomarvelnow-shortname","champion-captainamerica-shortname","champion-captainamericawwii-shortname","champion-spidermanmorales-shortname","champion-drstrange-shortname","champion-unstoppablecolossus-shortname","ability-stun-name","ability-fatigue-name","ability-powerdrain-name","ability-powerburn-name","ability-bleed-name","ability-cauterize-name","ability-armorbreak-name","ability-fury-name","ability-regeneration-name","ability-unstoppable-name","ability-poison-name","ability-armorup-name","ability-plusdamage-name","ability-pluscritrate-name","ability-pluscritdamage-name","ability-poisonimmunity-name","ability-bleedimmunity-name","effect-attack-name","effect-stun-name","effect-critrate-name","effect-critdamage-name","effect-powergain-name","effect-powersteal-name","effect-perfectblock-name","effect-block-name","effect-armor-name","effect-health-name","effect-healthsteal-name","effect-attack-description","effect-stun-description","effect-critrate-description","effect-critdamage-description","effect-powergain-description","effect-powersteal-description","effect-perfectblock-description","effect-block-description","effect-armor-description","effect-health-description","effect-healthsteal-description","type-cosmic-name","type-tech-name","type-mutant-name","type-skill-name","type-science-name","type-mystic-name","crystal-versus-name","crystal-arena-name","crystal-alliance-name","crystal-daily-name","crystal-2star-name","crystal-premium-name","crystal-3star-name","crystal-4star-name","crystal-versus-description","crystal-arena-description","crystal-alliance-description","crystal-daily-description","crystal-premium-description","crystal-3star-description","crystal-4star-description","algorithm-quest-name","algorithm-arena-name","algorithm-quest-description","algorithm-arena-description","of","with","found","extras","team","teams","guide","guides","synergy","synergies","crystal","crystals","manage","add-champion","import-csv","export-csv","delete-all","sort","name","rank","level","awakened","quest","view-guide","delete","cancel","ask-delete","ask-delete-all","cannot-undo","advanced-settings","team-size","algorithm","arena","build","add-all","reset-defaults","champion-weights","synergy-weights","duplicate-weights","choose-preset","use-levels","double","triple","quadruple","quintuple","choose-guide","share-to","facebook","twitter","google","tools","language","synergy-map","roster-manager","onboarding-synergies","onboarding-roster","onboarding-teams","coming-soon","description","gameplay","special","signature","attack","heavy-attack","abilities","passive-abilities","rating","grade","strategy","damage-type","range","note","synergies-external","author","profile","profile-reddit","profile-kabam","author-credit","email","none","algorithm-greedy-name","algorithm-shuffle-name","algorithm-greedy-description","algorithm-shuffle-description","champion-blackbolt-shortname","champion-drax-shortname","champion-gamora-shortname","champion-msmarvel-shortname","champion-ronan-shortname","champion-thor-shortname","champion-venom-shortname","champion-ironman-shortname","champion-ironpatriot-shortname","champion-hulkbuster-shortname","champion-kang-shortname","champion-starlord-shortname","champion-vision-shortname","champion-thevision-shortname","champion-ultron-shortname","champion-warmachine-shortname","champion-colossus-shortname","champion-cyclops-shortname","champion-deadpool-shortname","champion-magneto-shortname","champion-storm-shortname","champion-wolverine-shortname","champion-blackpanther-shortname","champion-blackwidow-shortname","champion-daredevil-shortname","champion-daredevilnetflix-shortname","champion-elektra-shortname","champion-hawkeye-shortname","champion-moonknight-shortname","champion-punisher-shortname","champion-wintersoldier-shortname","champion-abomination-shortname","champion-antman-shortname","champion-captaishortnamerica-shortname","champion-captaishortnamericawwii-shortname","champion-electro-shortname","champion-hulk-shortname","champion-joefixit-shortname","champion-rhino-shortname","champion-spidergwen-shortname","champion-spiderman-shortname","champion-yellowjacket-shortname","champion-ironfist-shortname","champion-juggernaut-shortname","champion-magik-shortname","champion-scarletwitch-shortname","quest-group","__WEBPACK_AMD_DEFINE_RESULT__","initialize","$document","$location","$cancelAnimationFrame","cancelAnimationFrame","clearTimeout","$requestAnimationFrame","requestAnimationFrame","hasAttrs","OBJECT","classAttrName","cell","classes","STRING","parser","exec","pair","attrParser","ARRAY","attrName","parentElement","parentTag","parentCache","parentIndex","data","cached","shouldReattach","editable","namespace","configs","e","subtree","cachedType","dataType","nodes","offset","end","intact","subArrayCount","DELETION","INSERTION","MOVE","existing","shouldMaintainIdentities","action","guid","keysDiffer","cachedCell","dataCell","element","actions","prop","changes","sortChanges","newCached","dummy","cacheCount","$trusted","node","views","controllers","$original","controllerIndex","controller","noop","pendingRequests","onunload","unloaders","dataAttrKeys","keys","hasKeys","configContext","retain","FUNCTION","preventDefault","isNew","xmlns","is","createElementNS","setAttributes","contenteditable","$old","context","injectHTML","nodeName","voidElements","valueOf","activeElement","innerHTML","nodeType","nodeValue","dataAttrs","cachedAttrs","dataAttr","cachedAttr","autoredraw","rule","setAttributeNS","message","unload","child","isElement","placeholder","insertAdjacentHTML","startComputation","endFirstComputation","getCellCacheKey","nodeCache","gettersetter","store","toJSON","parameterize","output","computePreRedrawHook","root","roots","components","$$args","render","computePostRedrawHook","lastRedrawId","lastRedrawCallTime","Date","normalizeRoute","modes","routeByValue","router","routeParams","queryStart","parseQueryString","values","decodeURIComponent","routeUnobtrusive","ctrlKey","metaKey","which","returnValue","currentTarget","srcElement","search","toUpperCase","setScroll","scrollTo","buildQueryString","prefix","duplicates","valueType","reduce","substring","pairs","reset","cacheKey","cellCache","propify","promise","initialValue","then","resolve","reject","Deferred","successCallback","failureCallback","finish","state","REJECTED","deferred","RESOLVED","promiseValue","thennable","notThennableCallback","count","onerror","REJECTING","RESOLVING","identity","ajax","xhr","XMLHttpRequest","user","password","onreadystatechange","readyState","status","onload","serialize","setRequestHeader","deserialize","config","maybeXhr","FormData","send","callbackKey","getTime","Math","round","random","script","resp","responseText","error","src","bindData","xhrOptions","querystring","parameterizeUrl","tokens","html","documentNode","documentElement","replaceChild","forceRecreation","isDocumentRoot","trust","String","topComponent","FRAME_BUDGET","unloader","isPrevented","subcomponent","currentComponent","redrawing","force","endComputation","max","withAttr","withAttrCallback","getAttribute","currentRoute","redirect","isDefaultRoute","defaultRoute","vdom","removeEventListener","detachEvent","oldRoute","queryIndex","currentPath","shouldReplaceHistoryEntry","sync","synchronizer","pos","resolved","results","outstanding","request","background","isJSONP","extract","jsonp","unwrap","unwrapSuccess","unwrapError","response","deps","mock","factory","webpackPolyfill","deprecate","paths","both","f1","f2","Menu","_this","toggle","isOpen","option","onClick","selectLanguage","_arr","_i","Roster","total","handleSelect","stopPropagation","handleDeselect","isEditing","_args$champion$toJSON","hasClick","starImages","RosterAdd","Synergy"],"mappings":"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","file":"app.js","sourcesContent":["\r\nconst app = {\r\n\tpages: {},\r\n};\r\n\r\nexport default app;\n\n\n/** WEBPACK FOOTER **\n ** app.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e7091b8b7245dc2de1e8\n **/","import 'font-awesome-webpack';\r\nimport './index.scss';\r\nimport { uids } from './data/champions.js';\r\nimport app from './service/app.js';\r\nimport roster from './service/roster.js';\r\nimport router from './service/router.js';\r\nimport App from './view/app/App.jsx';\r\nimport Roster from './view/page/Roster.jsx';\r\nimport RosterAdd from './view/page/RosterAdd.jsx';\r\nimport Teams from './view/page/Teams.jsx';\r\nimport Synergy from './view/page/Synergy.jsx';\r\nimport m from 'mithril';\r\n\r\nrouter.on('/guide', () => {\r\n\trouter.setRoute(`/guide/${ uids[0] }`);\r\n});\r\n\r\nrouter.on('/guide/:uid', (uid) => {\r\n\tapp.tab = 'guide';\r\n  \tm.redraw();\r\n});\r\n\r\nrouter.on('/roster', () => {\r\n\tapp.tab = 'roster';\r\n\tapp.pages['roster'] = (\r\n\t\t<Roster />\r\n\t);\r\n\tapp.menu = {\r\n\t\theader:{\r\n\t\t\ttitle: 'roster',\r\n\t\t\ticon: 'th',\r\n\t\t},\r\n\t\toptions:[\r\n\t\t\t{\r\n\t\t\t\ttitle: 'add-champion',\r\n\t\t\t\ticon: 'user-plus',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/2'),\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\ttitle: 'import-csv',\r\n\t\t\t\ticon: 'clipboard',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: 'export-csv',\r\n\t\t\t\ticon: 'floppy-o',\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\ttitle: 'delete-all',\r\n\t\t\t\ticon: 'user-times',\r\n\t\t\t\tonclick: () => {\r\n\t\t\t\t\troster.clear();\r\n  \t\t\t\t\tm.redraw();\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n  \tm.redraw();\r\n});\r\n\r\nrouter.on('/roster/add/:stars', (stars)=> {\r\n\tapp.tab = 'roster';\r\n\tapp.pages['roster'] = (\r\n\t\t<RosterAdd stars={ parseInt(stars, 10) } />\r\n\t);\r\n\tapp.menu = {\r\n\t\theader:{\r\n\t\t\ttitle: 'add-champion',\r\n\t\t\ticon: 'user-plus',\r\n\t\t},\r\n\t\toptions:[\r\n\t\t\t{\r\n\t\t\t\ttitle: '★',\r\n\t\t\t\tselected: stars === '1',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/1'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★',\r\n\t\t\t\tselected: stars === '2',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/2'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★',\r\n\t\t\t\tselected: stars === '3',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/3'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★★',\r\n\t\t\t\tselected: stars === '4',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/4'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★★★',\r\n\t\t\t\tselected: stars === '5',\r\n\t\t\t\tonclick: () => router.setRoute('/roster/add/5'),\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n  \tm.redraw();\r\n});\r\n\r\nrouter.on('/roster/:uid/:stars', (uid, stars)=> {\r\n\tapp.tab = 'roster';\r\n\tapp.pages['roster'] = (\r\n\t\t<Roster selected={ { uid, stars: parseInt(stars, 10) } } />\r\n\t);\r\n  \tm.redraw();\r\n});\r\n\r\nrouter.on('/teams', () => {\r\n\tapp.tab = 'teams';\r\n\tapp.pages['teams'] = (\r\n\t\t<Teams />\r\n\t);\r\n\tapp.menu = {\r\n\t};\r\n  \tm.redraw();\r\n});\r\n\r\nrouter.on('/synergy', () => {\r\n\trouter.setRoute(`/synergy/${ 2 }`);\r\n});\r\n\r\nrouter.on('/synergy/:stars', (stars) => {\r\n\tapp.tab = 'synergy';\r\n\tapp.pages['synergy'] = (\r\n\t\t<Synergy stars={ parseInt(stars, 10) } />\r\n\t);\r\n\tapp.menu = {\r\n\t\theader:{\r\n\t\t\ttitle: 'synergies',\r\n\t\t\ticon: 'users',\r\n\t\t},\r\n\t\toptions:[\r\n\t\t\t{\r\n\t\t\t\ttitle: '★',\r\n\t\t\t\tselected: stars === '1',\r\n\t\t\t\tonclick: () => router.setRoute('/synergy/1'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★',\r\n\t\t\t\tselected: stars === '2',\r\n\t\t\t\tonclick: () => router.setRoute('/synergy/2'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★',\r\n\t\t\t\tselected: stars === '3',\r\n\t\t\t\tonclick: () => router.setRoute('/synergy/3'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★★',\r\n\t\t\t\tselected: stars === '4',\r\n\t\t\t\tonclick: () => router.setRoute('/synergy/4'),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: '★★★★★',\r\n\t\t\t\tselected: stars === '5',\r\n\t\t\t\tonclick: () => router.setRoute('/synergy/5'),\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n  \tm.redraw();\r\n});\r\n\r\napp.tabs = [\r\n\t{\r\n\t\tid: 'guide',\r\n\t\ticon: 'user',\r\n\t\ttitle: 'guide',\r\n\t},\r\n\t{\r\n\t\tid: 'roster',\r\n\t\ticon: 'th',\r\n\t\ttitle: 'roster',\r\n\t},\r\n\t{\r\n\t\tid: 'teams',\r\n\t\ticon: 'cog',\r\n\t\ttitle: 'teams',\r\n\t},\r\n\t{\r\n\t\tid: 'synergy',\r\n\t\ticon: 'users',\r\n\t\ttitle: 'synergies',\r\n\t},\r\n];\r\n\r\nm.mount(document.body, (\r\n\t<App />\r\n));\r\nrouter.init('/roster');\r\ndocument.addEventListener('hotreload', function(){\r\n\tm.redraw();\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** index.js\n **/","require(\"style!css!less!./font-awesome-styles!./font-awesome.config.js\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome-webpack/index.js\n ** module id = 15\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./node_modules/css-loader/index.js!./node_modules/less-loader/index.js!./font-awesome-styles.loader.js!./font-awesome.config.js\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./node_modules/css-loader/index.js!./node_modules/less-loader/index.js!./font-awesome-styles.loader.js!./font-awesome.config.js\", function() {\n\t\t\tvar newContent = require(\"!!./node_modules/css-loader/index.js!./node_modules/less-loader/index.js!./font-awesome-styles.loader.js!./font-awesome.config.js\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome-webpack/~/style-loader!./~/font-awesome-webpack/~/css-loader!./~/font-awesome-webpack/~/less-loader!./~/font-awesome-webpack/font-awesome-styles.loader.js!./~/font-awesome-webpack/font-awesome.config.js\n ** module id = 16\n ** module chunks = 0\n **/","exports = module.exports = require(\"./node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".fa-border{padding:.2em .25em .15em;border:.08em solid #eee;border-radius:.1em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left{margin-right:.3em}.fa.fa-pull-right{margin-left:.3em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-fw{width:1.28571429em;text-align:center}.fa-glass:before{content:\\\"\\\\F000\\\"}.fa-music:before{content:\\\"\\\\F001\\\"}.fa-search:before{content:\\\"\\\\F002\\\"}.fa-envelope-o:before{content:\\\"\\\\F003\\\"}.fa-heart:before{content:\\\"\\\\F004\\\"}.fa-star:before{content:\\\"\\\\F005\\\"}.fa-star-o:before{content:\\\"\\\\F006\\\"}.fa-user:before{content:\\\"\\\\F007\\\"}.fa-film:before{content:\\\"\\\\F008\\\"}.fa-th-large:before{content:\\\"\\\\F009\\\"}.fa-th:before{content:\\\"\\\\F00A\\\"}.fa-th-list:before{content:\\\"\\\\F00B\\\"}.fa-check:before{content:\\\"\\\\F00C\\\"}.fa-close:before,.fa-remove:before,.fa-times:before{content:\\\"\\\\F00D\\\"}.fa-search-plus:before{content:\\\"\\\\F00E\\\"}.fa-search-minus:before{content:\\\"\\\\F010\\\"}.fa-power-off:before{content:\\\"\\\\F011\\\"}.fa-signal:before{content:\\\"\\\\F012\\\"}.fa-cog:before,.fa-gear:before{content:\\\"\\\\F013\\\"}.fa-trash-o:before{content:\\\"\\\\F014\\\"}.fa-home:before{content:\\\"\\\\F015\\\"}.fa-file-o:before{content:\\\"\\\\F016\\\"}.fa-clock-o:before{content:\\\"\\\\F017\\\"}.fa-road:before{content:\\\"\\\\F018\\\"}.fa-download:before{content:\\\"\\\\F019\\\"}.fa-arrow-circle-o-down:before{content:\\\"\\\\F01A\\\"}.fa-arrow-circle-o-up:before{content:\\\"\\\\F01B\\\"}.fa-inbox:before{content:\\\"\\\\F01C\\\"}.fa-play-circle-o:before{content:\\\"\\\\F01D\\\"}.fa-repeat:before,.fa-rotate-right:before{content:\\\"\\\\F01E\\\"}.fa-refresh:before{content:\\\"\\\\F021\\\"}.fa-list-alt:before{content:\\\"\\\\F022\\\"}.fa-lock:before{content:\\\"\\\\F023\\\"}.fa-flag:before{content:\\\"\\\\F024\\\"}.fa-headphones:before{content:\\\"\\\\F025\\\"}.fa-volume-off:before{content:\\\"\\\\F026\\\"}.fa-volume-down:before{content:\\\"\\\\F027\\\"}.fa-volume-up:before{content:\\\"\\\\F028\\\"}.fa-qrcode:before{content:\\\"\\\\F029\\\"}.fa-barcode:before{content:\\\"\\\\F02A\\\"}.fa-tag:before{content:\\\"\\\\F02B\\\"}.fa-tags:before{content:\\\"\\\\F02C\\\"}.fa-book:before{content:\\\"\\\\F02D\\\"}.fa-bookmark:before{content:\\\"\\\\F02E\\\"}.fa-print:before{content:\\\"\\\\F02F\\\"}.fa-camera:before{content:\\\"\\\\F030\\\"}.fa-font:before{content:\\\"\\\\F031\\\"}.fa-bold:before{content:\\\"\\\\F032\\\"}.fa-italic:before{content:\\\"\\\\F033\\\"}.fa-text-height:before{content:\\\"\\\\F034\\\"}.fa-text-width:before{content:\\\"\\\\F035\\\"}.fa-align-left:before{content:\\\"\\\\F036\\\"}.fa-align-center:before{content:\\\"\\\\F037\\\"}.fa-align-right:before{content:\\\"\\\\F038\\\"}.fa-align-justify:before{content:\\\"\\\\F039\\\"}.fa-list:before{content:\\\"\\\\F03A\\\"}.fa-dedent:before,.fa-outdent:before{content:\\\"\\\\F03B\\\"}.fa-indent:before{content:\\\"\\\\F03C\\\"}.fa-video-camera:before{content:\\\"\\\\F03D\\\"}.fa-image:before,.fa-photo:before,.fa-picture-o:before{content:\\\"\\\\F03E\\\"}.fa-pencil:before{content:\\\"\\\\F040\\\"}.fa-map-marker:before{content:\\\"\\\\F041\\\"}.fa-adjust:before{content:\\\"\\\\F042\\\"}.fa-tint:before{content:\\\"\\\\F043\\\"}.fa-edit:before,.fa-pencil-square-o:before{content:\\\"\\\\F044\\\"}.fa-share-square-o:before{content:\\\"\\\\F045\\\"}.fa-check-square-o:before{content:\\\"\\\\F046\\\"}.fa-arrows:before{content:\\\"\\\\F047\\\"}.fa-step-backward:before{content:\\\"\\\\F048\\\"}.fa-fast-backward:before{content:\\\"\\\\F049\\\"}.fa-backward:before{content:\\\"\\\\F04A\\\"}.fa-play:before{content:\\\"\\\\F04B\\\"}.fa-pause:before{content:\\\"\\\\F04C\\\"}.fa-stop:before{content:\\\"\\\\F04D\\\"}.fa-forward:before{content:\\\"\\\\F04E\\\"}.fa-fast-forward:before{content:\\\"\\\\F050\\\"}.fa-step-forward:before{content:\\\"\\\\F051\\\"}.fa-eject:before{content:\\\"\\\\F052\\\"}.fa-chevron-left:before{content:\\\"\\\\F053\\\"}.fa-chevron-right:before{content:\\\"\\\\F054\\\"}.fa-plus-circle:before{content:\\\"\\\\F055\\\"}.fa-minus-circle:before{content:\\\"\\\\F056\\\"}.fa-times-circle:before{content:\\\"\\\\F057\\\"}.fa-check-circle:before{content:\\\"\\\\F058\\\"}.fa-question-circle:before{content:\\\"\\\\F059\\\"}.fa-info-circle:before{content:\\\"\\\\F05A\\\"}.fa-crosshairs:before{content:\\\"\\\\F05B\\\"}.fa-times-circle-o:before{content:\\\"\\\\F05C\\\"}.fa-check-circle-o:before{content:\\\"\\\\F05D\\\"}.fa-ban:before{content:\\\"\\\\F05E\\\"}.fa-arrow-left:before{content:\\\"\\\\F060\\\"}.fa-arrow-right:before{content:\\\"\\\\F061\\\"}.fa-arrow-up:before{content:\\\"\\\\F062\\\"}.fa-arrow-down:before{content:\\\"\\\\F063\\\"}.fa-mail-forward:before,.fa-share:before{content:\\\"\\\\F064\\\"}.fa-expand:before{content:\\\"\\\\F065\\\"}.fa-compress:before{content:\\\"\\\\F066\\\"}.fa-plus:before{content:\\\"\\\\F067\\\"}.fa-minus:before{content:\\\"\\\\F068\\\"}.fa-asterisk:before{content:\\\"\\\\F069\\\"}.fa-exclamation-circle:before{content:\\\"\\\\F06A\\\"}.fa-gift:before{content:\\\"\\\\F06B\\\"}.fa-leaf:before{content:\\\"\\\\F06C\\\"}.fa-fire:before{content:\\\"\\\\F06D\\\"}.fa-eye:before{content:\\\"\\\\F06E\\\"}.fa-eye-slash:before{content:\\\"\\\\F070\\\"}.fa-exclamation-triangle:before,.fa-warning:before{content:\\\"\\\\F071\\\"}.fa-plane:before{content:\\\"\\\\F072\\\"}.fa-calendar:before{content:\\\"\\\\F073\\\"}.fa-random:before{content:\\\"\\\\F074\\\"}.fa-comment:before{content:\\\"\\\\F075\\\"}.fa-magnet:before{content:\\\"\\\\F076\\\"}.fa-chevron-up:before{content:\\\"\\\\F077\\\"}.fa-chevron-down:before{content:\\\"\\\\F078\\\"}.fa-retweet:before{content:\\\"\\\\F079\\\"}.fa-shopping-cart:before{content:\\\"\\\\F07A\\\"}.fa-folder:before{content:\\\"\\\\F07B\\\"}.fa-folder-open:before{content:\\\"\\\\F07C\\\"}.fa-arrows-v:before{content:\\\"\\\\F07D\\\"}.fa-arrows-h:before{content:\\\"\\\\F07E\\\"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:\\\"\\\\F080\\\"}.fa-twitter-square:before{content:\\\"\\\\F081\\\"}.fa-facebook-square:before{content:\\\"\\\\F082\\\"}.fa-camera-retro:before{content:\\\"\\\\F083\\\"}.fa-key:before{content:\\\"\\\\F084\\\"}.fa-cogs:before,.fa-gears:before{content:\\\"\\\\F085\\\"}.fa-comments:before{content:\\\"\\\\F086\\\"}.fa-thumbs-o-up:before{content:\\\"\\\\F087\\\"}.fa-thumbs-o-down:before{content:\\\"\\\\F088\\\"}.fa-star-half:before{content:\\\"\\\\F089\\\"}.fa-heart-o:before{content:\\\"\\\\F08A\\\"}.fa-sign-out:before{content:\\\"\\\\F08B\\\"}.fa-linkedin-square:before{content:\\\"\\\\F08C\\\"}.fa-thumb-tack:before{content:\\\"\\\\F08D\\\"}.fa-external-link:before{content:\\\"\\\\F08E\\\"}.fa-sign-in:before{content:\\\"\\\\F090\\\"}.fa-trophy:before{content:\\\"\\\\F091\\\"}.fa-github-square:before{content:\\\"\\\\F092\\\"}.fa-upload:before{content:\\\"\\\\F093\\\"}.fa-lemon-o:before{content:\\\"\\\\F094\\\"}.fa-phone:before{content:\\\"\\\\F095\\\"}.fa-square-o:before{content:\\\"\\\\F096\\\"}.fa-bookmark-o:before{content:\\\"\\\\F097\\\"}.fa-phone-square:before{content:\\\"\\\\F098\\\"}.fa-twitter:before{content:\\\"\\\\F099\\\"}.fa-facebook-f:before,.fa-facebook:before{content:\\\"\\\\F09A\\\"}.fa-github:before{content:\\\"\\\\F09B\\\"}.fa-unlock:before{content:\\\"\\\\F09C\\\"}.fa-credit-card:before{content:\\\"\\\\F09D\\\"}.fa-feed:before,.fa-rss:before{content:\\\"\\\\F09E\\\"}.fa-hdd-o:before{content:\\\"\\\\F0A0\\\"}.fa-bullhorn:before{content:\\\"\\\\F0A1\\\"}.fa-bell:before{content:\\\"\\\\F0F3\\\"}.fa-certificate:before{content:\\\"\\\\F0A3\\\"}.fa-hand-o-right:before{content:\\\"\\\\F0A4\\\"}.fa-hand-o-left:before{content:\\\"\\\\F0A5\\\"}.fa-hand-o-up:before{content:\\\"\\\\F0A6\\\"}.fa-hand-o-down:before{content:\\\"\\\\F0A7\\\"}.fa-arrow-circle-left:before{content:\\\"\\\\F0A8\\\"}.fa-arrow-circle-right:before{content:\\\"\\\\F0A9\\\"}.fa-arrow-circle-up:before{content:\\\"\\\\F0AA\\\"}.fa-arrow-circle-down:before{content:\\\"\\\\F0AB\\\"}.fa-globe:before{content:\\\"\\\\F0AC\\\"}.fa-wrench:before{content:\\\"\\\\F0AD\\\"}.fa-tasks:before{content:\\\"\\\\F0AE\\\"}.fa-filter:before{content:\\\"\\\\F0B0\\\"}.fa-briefcase:before{content:\\\"\\\\F0B1\\\"}.fa-arrows-alt:before{content:\\\"\\\\F0B2\\\"}.fa-group:before,.fa-users:before{content:\\\"\\\\F0C0\\\"}.fa-chain:before,.fa-link:before{content:\\\"\\\\F0C1\\\"}.fa-cloud:before{content:\\\"\\\\F0C2\\\"}.fa-flask:before{content:\\\"\\\\F0C3\\\"}.fa-cut:before,.fa-scissors:before{content:\\\"\\\\F0C4\\\"}.fa-copy:before,.fa-files-o:before{content:\\\"\\\\F0C5\\\"}.fa-paperclip:before{content:\\\"\\\\F0C6\\\"}.fa-floppy-o:before,.fa-save:before{content:\\\"\\\\F0C7\\\"}.fa-square:before{content:\\\"\\\\F0C8\\\"}.fa-bars:before,.fa-navicon:before,.fa-reorder:before{content:\\\"\\\\F0C9\\\"}.fa-list-ul:before{content:\\\"\\\\F0CA\\\"}.fa-list-ol:before{content:\\\"\\\\F0CB\\\"}.fa-strikethrough:before{content:\\\"\\\\F0CC\\\"}.fa-underline:before{content:\\\"\\\\F0CD\\\"}.fa-table:before{content:\\\"\\\\F0CE\\\"}.fa-magic:before{content:\\\"\\\\F0D0\\\"}.fa-truck:before{content:\\\"\\\\F0D1\\\"}.fa-pinterest:before{content:\\\"\\\\F0D2\\\"}.fa-pinterest-square:before{content:\\\"\\\\F0D3\\\"}.fa-google-plus-square:before{content:\\\"\\\\F0D4\\\"}.fa-google-plus:before{content:\\\"\\\\F0D5\\\"}.fa-money:before{content:\\\"\\\\F0D6\\\"}.fa-caret-down:before{content:\\\"\\\\F0D7\\\"}.fa-caret-up:before{content:\\\"\\\\F0D8\\\"}.fa-caret-left:before{content:\\\"\\\\F0D9\\\"}.fa-caret-right:before{content:\\\"\\\\F0DA\\\"}.fa-columns:before{content:\\\"\\\\F0DB\\\"}.fa-sort:before,.fa-unsorted:before{content:\\\"\\\\F0DC\\\"}.fa-sort-desc:before,.fa-sort-down:before{content:\\\"\\\\F0DD\\\"}.fa-sort-asc:before,.fa-sort-up:before{content:\\\"\\\\F0DE\\\"}.fa-envelope:before{content:\\\"\\\\F0E0\\\"}.fa-linkedin:before{content:\\\"\\\\F0E1\\\"}.fa-rotate-left:before,.fa-undo:before{content:\\\"\\\\F0E2\\\"}.fa-gavel:before,.fa-legal:before{content:\\\"\\\\F0E3\\\"}.fa-dashboard:before,.fa-tachometer:before{content:\\\"\\\\F0E4\\\"}.fa-comment-o:before{content:\\\"\\\\F0E5\\\"}.fa-comments-o:before{content:\\\"\\\\F0E6\\\"}.fa-bolt:before,.fa-flash:before{content:\\\"\\\\F0E7\\\"}.fa-sitemap:before{content:\\\"\\\\F0E8\\\"}.fa-umbrella:before{content:\\\"\\\\F0E9\\\"}.fa-clipboard:before,.fa-paste:before{content:\\\"\\\\F0EA\\\"}.fa-lightbulb-o:before{content:\\\"\\\\F0EB\\\"}.fa-exchange:before{content:\\\"\\\\F0EC\\\"}.fa-cloud-download:before{content:\\\"\\\\F0ED\\\"}.fa-cloud-upload:before{content:\\\"\\\\F0EE\\\"}.fa-user-md:before{content:\\\"\\\\F0F0\\\"}.fa-stethoscope:before{content:\\\"\\\\F0F1\\\"}.fa-suitcase:before{content:\\\"\\\\F0F2\\\"}.fa-bell-o:before{content:\\\"\\\\F0A2\\\"}.fa-coffee:before{content:\\\"\\\\F0F4\\\"}.fa-cutlery:before{content:\\\"\\\\F0F5\\\"}.fa-file-text-o:before{content:\\\"\\\\F0F6\\\"}.fa-building-o:before{content:\\\"\\\\F0F7\\\"}.fa-hospital-o:before{content:\\\"\\\\F0F8\\\"}.fa-ambulance:before{content:\\\"\\\\F0F9\\\"}.fa-medkit:before{content:\\\"\\\\F0FA\\\"}.fa-fighter-jet:before{content:\\\"\\\\F0FB\\\"}.fa-beer:before{content:\\\"\\\\F0FC\\\"}.fa-h-square:before{content:\\\"\\\\F0FD\\\"}.fa-plus-square:before{content:\\\"\\\\F0FE\\\"}.fa-angle-double-left:before{content:\\\"\\\\F100\\\"}.fa-angle-double-right:before{content:\\\"\\\\F101\\\"}.fa-angle-double-up:before{content:\\\"\\\\F102\\\"}.fa-angle-double-down:before{content:\\\"\\\\F103\\\"}.fa-angle-left:before{content:\\\"\\\\F104\\\"}.fa-angle-right:before{content:\\\"\\\\F105\\\"}.fa-angle-up:before{content:\\\"\\\\F106\\\"}.fa-angle-down:before{content:\\\"\\\\F107\\\"}.fa-desktop:before{content:\\\"\\\\F108\\\"}.fa-laptop:before{content:\\\"\\\\F109\\\"}.fa-tablet:before{content:\\\"\\\\F10A\\\"}.fa-mobile-phone:before,.fa-mobile:before{content:\\\"\\\\F10B\\\"}.fa-circle-o:before{content:\\\"\\\\F10C\\\"}.fa-quote-left:before{content:\\\"\\\\F10D\\\"}.fa-quote-right:before{content:\\\"\\\\F10E\\\"}.fa-spinner:before{content:\\\"\\\\F110\\\"}.fa-circle:before{content:\\\"\\\\F111\\\"}.fa-mail-reply:before,.fa-reply:before{content:\\\"\\\\F112\\\"}.fa-github-alt:before{content:\\\"\\\\F113\\\"}.fa-folder-o:before{content:\\\"\\\\F114\\\"}.fa-folder-open-o:before{content:\\\"\\\\F115\\\"}.fa-smile-o:before{content:\\\"\\\\F118\\\"}.fa-frown-o:before{content:\\\"\\\\F119\\\"}.fa-meh-o:before{content:\\\"\\\\F11A\\\"}.fa-gamepad:before{content:\\\"\\\\F11B\\\"}.fa-keyboard-o:before{content:\\\"\\\\F11C\\\"}.fa-flag-o:before{content:\\\"\\\\F11D\\\"}.fa-flag-checkered:before{content:\\\"\\\\F11E\\\"}.fa-terminal:before{content:\\\"\\\\F120\\\"}.fa-code:before{content:\\\"\\\\F121\\\"}.fa-mail-reply-all:before,.fa-reply-all:before{content:\\\"\\\\F122\\\"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\\"\\\\F123\\\"}.fa-location-arrow:before{content:\\\"\\\\F124\\\"}.fa-crop:before{content:\\\"\\\\F125\\\"}.fa-code-fork:before{content:\\\"\\\\F126\\\"}.fa-chain-broken:before,.fa-unlink:before{content:\\\"\\\\F127\\\"}.fa-question:before{content:\\\"\\\\F128\\\"}.fa-info:before{content:\\\"\\\\F129\\\"}.fa-exclamation:before{content:\\\"\\\\F12A\\\"}.fa-superscript:before{content:\\\"\\\\F12B\\\"}.fa-subscript:before{content:\\\"\\\\F12C\\\"}.fa-eraser:before{content:\\\"\\\\F12D\\\"}.fa-puzzle-piece:before{content:\\\"\\\\F12E\\\"}.fa-microphone:before{content:\\\"\\\\F130\\\"}.fa-microphone-slash:before{content:\\\"\\\\F131\\\"}.fa-shield:before{content:\\\"\\\\F132\\\"}.fa-calendar-o:before{content:\\\"\\\\F133\\\"}.fa-fire-extinguisher:before{content:\\\"\\\\F134\\\"}.fa-rocket:before{content:\\\"\\\\F135\\\"}.fa-maxcdn:before{content:\\\"\\\\F136\\\"}.fa-chevron-circle-left:before{content:\\\"\\\\F137\\\"}.fa-chevron-circle-right:before{content:\\\"\\\\F138\\\"}.fa-chevron-circle-up:before{content:\\\"\\\\F139\\\"}.fa-chevron-circle-down:before{content:\\\"\\\\F13A\\\"}.fa-html5:before{content:\\\"\\\\F13B\\\"}.fa-css3:before{content:\\\"\\\\F13C\\\"}.fa-anchor:before{content:\\\"\\\\F13D\\\"}.fa-unlock-alt:before{content:\\\"\\\\F13E\\\"}.fa-bullseye:before{content:\\\"\\\\F140\\\"}.fa-ellipsis-h:before{content:\\\"\\\\F141\\\"}.fa-ellipsis-v:before{content:\\\"\\\\F142\\\"}.fa-rss-square:before{content:\\\"\\\\F143\\\"}.fa-play-circle:before{content:\\\"\\\\F144\\\"}.fa-ticket:before{content:\\\"\\\\F145\\\"}.fa-minus-square:before{content:\\\"\\\\F146\\\"}.fa-minus-square-o:before{content:\\\"\\\\F147\\\"}.fa-level-up:before{content:\\\"\\\\F148\\\"}.fa-level-down:before{content:\\\"\\\\F149\\\"}.fa-check-square:before{content:\\\"\\\\F14A\\\"}.fa-pencil-square:before{content:\\\"\\\\F14B\\\"}.fa-external-link-square:before{content:\\\"\\\\F14C\\\"}.fa-share-square:before{content:\\\"\\\\F14D\\\"}.fa-compass:before{content:\\\"\\\\F14E\\\"}.fa-caret-square-o-down:before,.fa-toggle-down:before{content:\\\"\\\\F150\\\"}.fa-caret-square-o-up:before,.fa-toggle-up:before{content:\\\"\\\\F151\\\"}.fa-caret-square-o-right:before,.fa-toggle-right:before{content:\\\"\\\\F152\\\"}.fa-eur:before,.fa-euro:before{content:\\\"\\\\F153\\\"}.fa-gbp:before{content:\\\"\\\\F154\\\"}.fa-dollar:before,.fa-usd:before{content:\\\"\\\\F155\\\"}.fa-inr:before,.fa-rupee:before{content:\\\"\\\\F156\\\"}.fa-cny:before,.fa-jpy:before,.fa-rmb:before,.fa-yen:before{content:\\\"\\\\F157\\\"}.fa-rouble:before,.fa-rub:before,.fa-ruble:before{content:\\\"\\\\F158\\\"}.fa-krw:before,.fa-won:before{content:\\\"\\\\F159\\\"}.fa-bitcoin:before,.fa-btc:before{content:\\\"\\\\F15A\\\"}.fa-file:before{content:\\\"\\\\F15B\\\"}.fa-file-text:before{content:\\\"\\\\F15C\\\"}.fa-sort-alpha-asc:before{content:\\\"\\\\F15D\\\"}.fa-sort-alpha-desc:before{content:\\\"\\\\F15E\\\"}.fa-sort-amount-asc:before{content:\\\"\\\\F160\\\"}.fa-sort-amount-desc:before{content:\\\"\\\\F161\\\"}.fa-sort-numeric-asc:before{content:\\\"\\\\F162\\\"}.fa-sort-numeric-desc:before{content:\\\"\\\\F163\\\"}.fa-thumbs-up:before{content:\\\"\\\\F164\\\"}.fa-thumbs-down:before{content:\\\"\\\\F165\\\"}.fa-youtube-square:before{content:\\\"\\\\F166\\\"}.fa-youtube:before{content:\\\"\\\\F167\\\"}.fa-xing:before{content:\\\"\\\\F168\\\"}.fa-xing-square:before{content:\\\"\\\\F169\\\"}.fa-youtube-play:before{content:\\\"\\\\F16A\\\"}.fa-dropbox:before{content:\\\"\\\\F16B\\\"}.fa-stack-overflow:before{content:\\\"\\\\F16C\\\"}.fa-instagram:before{content:\\\"\\\\F16D\\\"}.fa-flickr:before{content:\\\"\\\\F16E\\\"}.fa-adn:before{content:\\\"\\\\F170\\\"}.fa-bitbucket:before{content:\\\"\\\\F171\\\"}.fa-bitbucket-square:before{content:\\\"\\\\F172\\\"}.fa-tumblr:before{content:\\\"\\\\F173\\\"}.fa-tumblr-square:before{content:\\\"\\\\F174\\\"}.fa-long-arrow-down:before{content:\\\"\\\\F175\\\"}.fa-long-arrow-up:before{content:\\\"\\\\F176\\\"}.fa-long-arrow-left:before{content:\\\"\\\\F177\\\"}.fa-long-arrow-right:before{content:\\\"\\\\F178\\\"}.fa-apple:before{content:\\\"\\\\F179\\\"}.fa-windows:before{content:\\\"\\\\F17A\\\"}.fa-android:before{content:\\\"\\\\F17B\\\"}.fa-linux:before{content:\\\"\\\\F17C\\\"}.fa-dribbble:before{content:\\\"\\\\F17D\\\"}.fa-skype:before{content:\\\"\\\\F17E\\\"}.fa-foursquare:before{content:\\\"\\\\F180\\\"}.fa-trello:before{content:\\\"\\\\F181\\\"}.fa-female:before{content:\\\"\\\\F182\\\"}.fa-male:before{content:\\\"\\\\F183\\\"}.fa-gittip:before,.fa-gratipay:before{content:\\\"\\\\F184\\\"}.fa-sun-o:before{content:\\\"\\\\F185\\\"}.fa-moon-o:before{content:\\\"\\\\F186\\\"}.fa-archive:before{content:\\\"\\\\F187\\\"}.fa-bug:before{content:\\\"\\\\F188\\\"}.fa-vk:before{content:\\\"\\\\F189\\\"}.fa-weibo:before{content:\\\"\\\\F18A\\\"}.fa-renren:before{content:\\\"\\\\F18B\\\"}.fa-pagelines:before{content:\\\"\\\\F18C\\\"}.fa-stack-exchange:before{content:\\\"\\\\F18D\\\"}.fa-arrow-circle-o-right:before{content:\\\"\\\\F18E\\\"}.fa-arrow-circle-o-left:before{content:\\\"\\\\F190\\\"}.fa-caret-square-o-left:before,.fa-toggle-left:before{content:\\\"\\\\F191\\\"}.fa-dot-circle-o:before{content:\\\"\\\\F192\\\"}.fa-wheelchair:before{content:\\\"\\\\F193\\\"}.fa-vimeo-square:before{content:\\\"\\\\F194\\\"}.fa-try:before,.fa-turkish-lira:before{content:\\\"\\\\F195\\\"}.fa-plus-square-o:before{content:\\\"\\\\F196\\\"}.fa-space-shuttle:before{content:\\\"\\\\F197\\\"}.fa-slack:before{content:\\\"\\\\F198\\\"}.fa-envelope-square:before{content:\\\"\\\\F199\\\"}.fa-wordpress:before{content:\\\"\\\\F19A\\\"}.fa-openid:before{content:\\\"\\\\F19B\\\"}.fa-bank:before,.fa-institution:before,.fa-university:before{content:\\\"\\\\F19C\\\"}.fa-graduation-cap:before,.fa-mortar-board:before{content:\\\"\\\\F19D\\\"}.fa-yahoo:before{content:\\\"\\\\F19E\\\"}.fa-google:before{content:\\\"\\\\F1A0\\\"}.fa-reddit:before{content:\\\"\\\\F1A1\\\"}.fa-reddit-square:before{content:\\\"\\\\F1A2\\\"}.fa-stumbleupon-circle:before{content:\\\"\\\\F1A3\\\"}.fa-stumbleupon:before{content:\\\"\\\\F1A4\\\"}.fa-delicious:before{content:\\\"\\\\F1A5\\\"}.fa-digg:before{content:\\\"\\\\F1A6\\\"}.fa-pied-piper:before{content:\\\"\\\\F1A7\\\"}.fa-pied-piper-alt:before{content:\\\"\\\\F1A8\\\"}.fa-drupal:before{content:\\\"\\\\F1A9\\\"}.fa-joomla:before{content:\\\"\\\\F1AA\\\"}.fa-language:before{content:\\\"\\\\F1AB\\\"}.fa-fax:before{content:\\\"\\\\F1AC\\\"}.fa-building:before{content:\\\"\\\\F1AD\\\"}.fa-child:before{content:\\\"\\\\F1AE\\\"}.fa-paw:before{content:\\\"\\\\F1B0\\\"}.fa-spoon:before{content:\\\"\\\\F1B1\\\"}.fa-cube:before{content:\\\"\\\\F1B2\\\"}.fa-cubes:before{content:\\\"\\\\F1B3\\\"}.fa-behance:before{content:\\\"\\\\F1B4\\\"}.fa-behance-square:before{content:\\\"\\\\F1B5\\\"}.fa-steam:before{content:\\\"\\\\F1B6\\\"}.fa-steam-square:before{content:\\\"\\\\F1B7\\\"}.fa-recycle:before{content:\\\"\\\\F1B8\\\"}.fa-automobile:before,.fa-car:before{content:\\\"\\\\F1B9\\\"}.fa-cab:before,.fa-taxi:before{content:\\\"\\\\F1BA\\\"}.fa-tree:before{content:\\\"\\\\F1BB\\\"}.fa-spotify:before{content:\\\"\\\\F1BC\\\"}.fa-deviantart:before{content:\\\"\\\\F1BD\\\"}.fa-soundcloud:before{content:\\\"\\\\F1BE\\\"}.fa-database:before{content:\\\"\\\\F1C0\\\"}.fa-file-pdf-o:before{content:\\\"\\\\F1C1\\\"}.fa-file-word-o:before{content:\\\"\\\\F1C2\\\"}.fa-file-excel-o:before{content:\\\"\\\\F1C3\\\"}.fa-file-powerpoint-o:before{content:\\\"\\\\F1C4\\\"}.fa-file-image-o:before,.fa-file-photo-o:before,.fa-file-picture-o:before{content:\\\"\\\\F1C5\\\"}.fa-file-archive-o:before,.fa-file-zip-o:before{content:\\\"\\\\F1C6\\\"}.fa-file-audio-o:before,.fa-file-sound-o:before{content:\\\"\\\\F1C7\\\"}.fa-file-movie-o:before,.fa-file-video-o:before{content:\\\"\\\\F1C8\\\"}.fa-file-code-o:before{content:\\\"\\\\F1C9\\\"}.fa-vine:before{content:\\\"\\\\F1CA\\\"}.fa-codepen:before{content:\\\"\\\\F1CB\\\"}.fa-jsfiddle:before{content:\\\"\\\\F1CC\\\"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-ring:before,.fa-life-saver:before,.fa-support:before{content:\\\"\\\\F1CD\\\"}.fa-circle-o-notch:before{content:\\\"\\\\F1CE\\\"}.fa-ra:before,.fa-rebel:before{content:\\\"\\\\F1D0\\\"}.fa-empire:before,.fa-ge:before{content:\\\"\\\\F1D1\\\"}.fa-git-square:before{content:\\\"\\\\F1D2\\\"}.fa-git:before{content:\\\"\\\\F1D3\\\"}.fa-hacker-news:before,.fa-y-combinator-square:before,.fa-yc-square:before{content:\\\"\\\\F1D4\\\"}.fa-tencent-weibo:before{content:\\\"\\\\F1D5\\\"}.fa-qq:before{content:\\\"\\\\F1D6\\\"}.fa-wechat:before,.fa-weixin:before{content:\\\"\\\\F1D7\\\"}.fa-paper-plane:before,.fa-send:before{content:\\\"\\\\F1D8\\\"}.fa-paper-plane-o:before,.fa-send-o:before{content:\\\"\\\\F1D9\\\"}.fa-history:before{content:\\\"\\\\F1DA\\\"}.fa-circle-thin:before{content:\\\"\\\\F1DB\\\"}.fa-header:before{content:\\\"\\\\F1DC\\\"}.fa-paragraph:before{content:\\\"\\\\F1DD\\\"}.fa-sliders:before{content:\\\"\\\\F1DE\\\"}.fa-share-alt:before{content:\\\"\\\\F1E0\\\"}.fa-share-alt-square:before{content:\\\"\\\\F1E1\\\"}.fa-bomb:before{content:\\\"\\\\F1E2\\\"}.fa-futbol-o:before,.fa-soccer-ball-o:before{content:\\\"\\\\F1E3\\\"}.fa-tty:before{content:\\\"\\\\F1E4\\\"}.fa-binoculars:before{content:\\\"\\\\F1E5\\\"}.fa-plug:before{content:\\\"\\\\F1E6\\\"}.fa-slideshare:before{content:\\\"\\\\F1E7\\\"}.fa-twitch:before{content:\\\"\\\\F1E8\\\"}.fa-yelp:before{content:\\\"\\\\F1E9\\\"}.fa-newspaper-o:before{content:\\\"\\\\F1EA\\\"}.fa-wifi:before{content:\\\"\\\\F1EB\\\"}.fa-calculator:before{content:\\\"\\\\F1EC\\\"}.fa-paypal:before{content:\\\"\\\\F1ED\\\"}.fa-google-wallet:before{content:\\\"\\\\F1EE\\\"}.fa-cc-visa:before{content:\\\"\\\\F1F0\\\"}.fa-cc-mastercard:before{content:\\\"\\\\F1F1\\\"}.fa-cc-discover:before{content:\\\"\\\\F1F2\\\"}.fa-cc-amex:before{content:\\\"\\\\F1F3\\\"}.fa-cc-paypal:before{content:\\\"\\\\F1F4\\\"}.fa-cc-stripe:before{content:\\\"\\\\F1F5\\\"}.fa-bell-slash:before{content:\\\"\\\\F1F6\\\"}.fa-bell-slash-o:before{content:\\\"\\\\F1F7\\\"}.fa-trash:before{content:\\\"\\\\F1F8\\\"}.fa-copyright:before{content:\\\"\\\\F1F9\\\"}.fa-at:before{content:\\\"\\\\F1FA\\\"}.fa-eyedropper:before{content:\\\"\\\\F1FB\\\"}.fa-paint-brush:before{content:\\\"\\\\F1FC\\\"}.fa-birthday-cake:before{content:\\\"\\\\F1FD\\\"}.fa-area-chart:before{content:\\\"\\\\F1FE\\\"}.fa-pie-chart:before{content:\\\"\\\\F200\\\"}.fa-line-chart:before{content:\\\"\\\\F201\\\"}.fa-lastfm:before{content:\\\"\\\\F202\\\"}.fa-lastfm-square:before{content:\\\"\\\\F203\\\"}.fa-toggle-off:before{content:\\\"\\\\F204\\\"}.fa-toggle-on:before{content:\\\"\\\\F205\\\"}.fa-bicycle:before{content:\\\"\\\\F206\\\"}.fa-bus:before{content:\\\"\\\\F207\\\"}.fa-ioxhost:before{content:\\\"\\\\F208\\\"}.fa-angellist:before{content:\\\"\\\\F209\\\"}.fa-cc:before{content:\\\"\\\\F20A\\\"}.fa-ils:before,.fa-shekel:before,.fa-sheqel:before{content:\\\"\\\\F20B\\\"}.fa-meanpath:before{content:\\\"\\\\F20C\\\"}.fa-buysellads:before{content:\\\"\\\\F20D\\\"}.fa-connectdevelop:before{content:\\\"\\\\F20E\\\"}.fa-dashcube:before{content:\\\"\\\\F210\\\"}.fa-forumbee:before{content:\\\"\\\\F211\\\"}.fa-leanpub:before{content:\\\"\\\\F212\\\"}.fa-sellsy:before{content:\\\"\\\\F213\\\"}.fa-shirtsinbulk:before{content:\\\"\\\\F214\\\"}.fa-simplybuilt:before{content:\\\"\\\\F215\\\"}.fa-skyatlas:before{content:\\\"\\\\F216\\\"}.fa-cart-plus:before{content:\\\"\\\\F217\\\"}.fa-cart-arrow-down:before{content:\\\"\\\\F218\\\"}.fa-diamond:before{content:\\\"\\\\F219\\\"}.fa-ship:before{content:\\\"\\\\F21A\\\"}.fa-user-secret:before{content:\\\"\\\\F21B\\\"}.fa-motorcycle:before{content:\\\"\\\\F21C\\\"}.fa-street-view:before{content:\\\"\\\\F21D\\\"}.fa-heartbeat:before{content:\\\"\\\\F21E\\\"}.fa-venus:before{content:\\\"\\\\F221\\\"}.fa-mars:before{content:\\\"\\\\F222\\\"}.fa-mercury:before{content:\\\"\\\\F223\\\"}.fa-intersex:before,.fa-transgender:before{content:\\\"\\\\F224\\\"}.fa-transgender-alt:before{content:\\\"\\\\F225\\\"}.fa-venus-double:before{content:\\\"\\\\F226\\\"}.fa-mars-double:before{content:\\\"\\\\F227\\\"}.fa-venus-mars:before{content:\\\"\\\\F228\\\"}.fa-mars-stroke:before{content:\\\"\\\\F229\\\"}.fa-mars-stroke-v:before{content:\\\"\\\\F22A\\\"}.fa-mars-stroke-h:before{content:\\\"\\\\F22B\\\"}.fa-neuter:before{content:\\\"\\\\F22C\\\"}.fa-genderless:before{content:\\\"\\\\F22D\\\"}.fa-facebook-official:before{content:\\\"\\\\F230\\\"}.fa-pinterest-p:before{content:\\\"\\\\F231\\\"}.fa-whatsapp:before{content:\\\"\\\\F232\\\"}.fa-server:before{content:\\\"\\\\F233\\\"}.fa-user-plus:before{content:\\\"\\\\F234\\\"}.fa-user-times:before{content:\\\"\\\\F235\\\"}.fa-bed:before,.fa-hotel:before{content:\\\"\\\\F236\\\"}.fa-viacoin:before{content:\\\"\\\\F237\\\"}.fa-train:before{content:\\\"\\\\F238\\\"}.fa-subway:before{content:\\\"\\\\F239\\\"}.fa-medium:before{content:\\\"\\\\F23A\\\"}.fa-y-combinator:before,.fa-yc:before{content:\\\"\\\\F23B\\\"}.fa-optin-monster:before{content:\\\"\\\\F23C\\\"}.fa-opencart:before{content:\\\"\\\\F23D\\\"}.fa-expeditedssl:before{content:\\\"\\\\F23E\\\"}.fa-battery-4:before,.fa-battery-full:before{content:\\\"\\\\F240\\\"}.fa-battery-3:before,.fa-battery-three-quarters:before{content:\\\"\\\\F241\\\"}.fa-battery-2:before,.fa-battery-half:before{content:\\\"\\\\F242\\\"}.fa-battery-1:before,.fa-battery-quarter:before{content:\\\"\\\\F243\\\"}.fa-battery-0:before,.fa-battery-empty:before{content:\\\"\\\\F244\\\"}.fa-mouse-pointer:before{content:\\\"\\\\F245\\\"}.fa-i-cursor:before{content:\\\"\\\\F246\\\"}.fa-object-group:before{content:\\\"\\\\F247\\\"}.fa-object-ungroup:before{content:\\\"\\\\F248\\\"}.fa-sticky-note:before{content:\\\"\\\\F249\\\"}.fa-sticky-note-o:before{content:\\\"\\\\F24A\\\"}.fa-cc-jcb:before{content:\\\"\\\\F24B\\\"}.fa-cc-diners-club:before{content:\\\"\\\\F24C\\\"}.fa-clone:before{content:\\\"\\\\F24D\\\"}.fa-balance-scale:before{content:\\\"\\\\F24E\\\"}.fa-hourglass-o:before{content:\\\"\\\\F250\\\"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:\\\"\\\\F251\\\"}.fa-hourglass-2:before,.fa-hourglass-half:before{content:\\\"\\\\F252\\\"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:\\\"\\\\F253\\\"}.fa-hourglass:before{content:\\\"\\\\F254\\\"}.fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\\"\\\\F255\\\"}.fa-hand-paper-o:before,.fa-hand-stop-o:before{content:\\\"\\\\F256\\\"}.fa-hand-scissors-o:before{content:\\\"\\\\F257\\\"}.fa-hand-lizard-o:before{content:\\\"\\\\F258\\\"}.fa-hand-spock-o:before{content:\\\"\\\\F259\\\"}.fa-hand-pointer-o:before{content:\\\"\\\\F25A\\\"}.fa-hand-peace-o:before{content:\\\"\\\\F25B\\\"}.fa-trademark:before{content:\\\"\\\\F25C\\\"}.fa-registered:before{content:\\\"\\\\F25D\\\"}.fa-creative-commons:before{content:\\\"\\\\F25E\\\"}.fa-gg:before{content:\\\"\\\\F260\\\"}.fa-gg-circle:before{content:\\\"\\\\F261\\\"}.fa-tripadvisor:before{content:\\\"\\\\F262\\\"}.fa-odnoklassniki:before{content:\\\"\\\\F263\\\"}.fa-odnoklassniki-square:before{content:\\\"\\\\F264\\\"}.fa-get-pocket:before{content:\\\"\\\\F265\\\"}.fa-wikipedia-w:before{content:\\\"\\\\F266\\\"}.fa-safari:before{content:\\\"\\\\F267\\\"}.fa-chrome:before{content:\\\"\\\\F268\\\"}.fa-firefox:before{content:\\\"\\\\F269\\\"}.fa-opera:before{content:\\\"\\\\F26A\\\"}.fa-internet-explorer:before{content:\\\"\\\\F26B\\\"}.fa-television:before,.fa-tv:before{content:\\\"\\\\F26C\\\"}.fa-contao:before{content:\\\"\\\\F26D\\\"}.fa-500px:before{content:\\\"\\\\F26E\\\"}.fa-amazon:before{content:\\\"\\\\F270\\\"}.fa-calendar-plus-o:before{content:\\\"\\\\F271\\\"}.fa-calendar-minus-o:before{content:\\\"\\\\F272\\\"}.fa-calendar-times-o:before{content:\\\"\\\\F273\\\"}.fa-calendar-check-o:before{content:\\\"\\\\F274\\\"}.fa-industry:before{content:\\\"\\\\F275\\\"}.fa-map-pin:before{content:\\\"\\\\F276\\\"}.fa-map-signs:before{content:\\\"\\\\F277\\\"}.fa-map-o:before{content:\\\"\\\\F278\\\"}.fa-map:before{content:\\\"\\\\F279\\\"}.fa-commenting:before{content:\\\"\\\\F27A\\\"}.fa-commenting-o:before{content:\\\"\\\\F27B\\\"}.fa-houzz:before{content:\\\"\\\\F27C\\\"}.fa-vimeo:before{content:\\\"\\\\F27D\\\"}.fa-black-tie:before{content:\\\"\\\\F27E\\\"}.fa-fonticons:before{content:\\\"\\\\F280\\\"}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}@font-face{font-family:FontAwesome;src:url(\" + require(\"font-awesome/fonts//fontawesome-webfont.eot?v=4.4.0\") + \");src:url(\" + require(\"font-awesome/fonts//fontawesome-webfont.eot\") + \"?#iefix&v=4.4.0) format('embedded-opentype'),url(\" + require(\"font-awesome/fonts//fontawesome-webfont.woff2?v=4.4.0\") + \") format('woff2'),url(\" + require(\"font-awesome/fonts//fontawesome-webfont.woff?v=4.4.0\") + \") format('woff'),url(\" + require(\"font-awesome/fonts//fontawesome-webfont.ttf?v=4.4.0\") + \") format('truetype'),url(\" + require(\"font-awesome/fonts//fontawesome-webfont.svg?v=4.4.0\") + \"#fontawesomeregular) format('svg');font-weight:400;font-style:normal}.fa-rotate-90{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=1);-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2);-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=3);-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=0,mirror=1);-webkit-transform:scale(-1,1);-ms-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2,mirror=1);-webkit-transform:scale(1,-1);-ms-transform:scale(1,-1);transform:scale(1,-1)}:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome-webpack/~/css-loader!./~/font-awesome-webpack/~/less-loader!./~/font-awesome-webpack/font-awesome-styles.loader.js!./~/font-awesome-webpack/font-awesome.config.js\n ** module id = 17\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome-webpack/~/css-loader/lib/css-base.js\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/fontawesome-webfont.eot\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome/fonts/fontawesome-webfont.eot?v=4.4.0\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = \"data:application/font-woff;base64,\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome/fonts/fontawesome-webfont.woff2?v=4.4.0\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = \"data:application/font-woff;base64,\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome/fonts/fontawesome-webfont.woff?v=4.4.0\n ** module id = 22\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/fontawesome-webfont.ttf\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome/fonts/fontawesome-webfont.ttf?v=4.4.0\n ** module id = 23\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/fontawesome-webfont.svg\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome/fonts/fontawesome-webfont.svg?v=4.4.0\n ** module id = 24\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0;\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction createStyleElement() {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tvar head = getHeadElement();\r\n\tstyleElement.type = \"text/css\";\r\n\thead.appendChild(styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement() {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tvar head = getHeadElement();\r\n\tlinkElement.rel = \"stylesheet\";\r\n\thead.appendChild(linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement());\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement();\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement();\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/font-awesome-webpack/~/style-loader/addStyles.js\n ** module id = 25\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./index.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./index.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./index.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.scss\n ** module id = 26\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"*{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body,html{margin:0;padding:0}@font-face{font-family:Hanzel;src:url(\" + require(\"./fonts/hanzel-normal-webfont.eot\") + \");src:url(\" + require(\"./fonts/hanzel-normal-webfont.eot\") + \"?#iefix) format(\\\"embedded-opentype\\\"),url(\" + require(\"./fonts/hanzel-normal-webfont.woff2\") + \") format(\\\"woff2\\\"),url(\" + require(\"./fonts/hanzel-normal-webfont.woff\") + \") format(\\\"woff\\\"),url(\" + require(\"./fonts/hanzel-normal-webfont.ttf\") + \") format(\\\"truetype\\\"),url(\" + require(\"./fonts/hanzel-normal-webfont.svg\") + \"#hanzelnormal) format(\\\"svg\\\");font-weight:400;font-style:normal}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/index.scss\n ** module id = 27\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/hanzel-normal-webfont.eot\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/fonts/hanzel-normal-webfont.eot\n ** module id = 29\n ** module chunks = 0\n **/","module.exports = \"data:application/font-woff;base64,\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/fonts/hanzel-normal-webfont.woff2\n ** module id = 30\n ** module chunks = 0\n **/","module.exports = \"data:application/font-woff;base64,\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/fonts/hanzel-normal-webfont.woff\n ** module id = 31\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/hanzel-normal-webfont.ttf\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/fonts/hanzel-normal-webfont.ttf\n ** module id = 32\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"fonts/hanzel-normal-webfont.svg\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/fonts/hanzel-normal-webfont.svg\n ** module id = 33\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 34\n ** module chunks = 0\n **/","import Champion from '../model/Champion';\r\n\r\nconst champions = [\r\n\r\n\t{ uid:'blackbolt', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'blackbolt', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'blackbolt', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'captainmarvel', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'captainmarvel', typeId:'cosmic', stars: 4 },\r\n\t{ uid:'captainmarvel', typeId:'cosmic', stars: 5 },\r\n\r\n\t{ uid:'drax', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'drax', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'drax', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'gamora', typeId:'cosmic', stars: 1 },\r\n\t{ uid:'gamora', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'gamora', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'gamora', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'msmarvel', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'msmarvel', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'ronan', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'ronan', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'ronan', typeId:'cosmic', stars: 4 },\r\n\t{ uid:'ronan', typeId:'cosmic', stars: 5 },\r\n\r\n\t{ uid:'spidermanblack', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'spidermanblack', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'superiorironman', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'superiorironman', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'superiorironman', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'thor', typeId:'cosmic', stars: 2 },\r\n\t{ uid:'thor', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'thor', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'thorjanefoster', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'thorjanefoster', typeId:'cosmic', stars: 4 },\r\n\r\n\t{ uid:'venom', typeId:'cosmic', stars: 3 },\r\n\t{ uid:'venom', typeId:'cosmic', stars: 4 },\r\n\t{ uid:'venom', typeId:'cosmic', stars: 5 },\r\n\r\n\t{ uid:'ironman', typeId:'tech', stars: 1 },\r\n\t{ uid:'ironman', typeId:'tech', stars: 2 },\r\n\t{ uid:'ironman', typeId:'tech', stars: 3 },\r\n\t{ uid:'ironman', typeId:'tech', stars: 4 },\r\n\t{ uid:'ironman', typeId:'tech', stars: 5 },\r\n\r\n\t{ uid:'ironpatriot', typeId:'tech', stars: 3 },\r\n\t{ uid:'ironpatriot', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'hulkbuster', typeId:'tech', stars: 2 },\r\n\t{ uid:'hulkbuster', typeId:'tech', stars: 3 },\r\n\t{ uid:'hulkbuster', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'kang', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'rocket', typeId:'tech', stars: 3 },\r\n\t{ uid:'rocket', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'starlord', typeId:'tech', stars: 2 },\r\n\t{ uid:'starlord', typeId:'tech', stars: 3 },\r\n\t{ uid:'starlord', typeId:'tech', stars: 4 },\r\n\t{ uid:'starlord', typeId:'tech', stars: 5 },\r\n\r\n\t{ uid:'vision', typeId:'tech', stars: 1 },\r\n\t{ uid:'vision', typeId:'tech', stars: 2 },\r\n\t{ uid:'vision', typeId:'tech', stars: 3 },\r\n\t{ uid:'vision', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'thevision', typeId:'tech', stars: 2 },\r\n\t{ uid:'thevision', typeId:'tech', stars: 3 },\r\n\t{ uid:'thevision', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'ultron', typeId:'tech', stars: 2 },\r\n\t{ uid:'ultron', typeId:'tech', stars: 3 },\r\n\t{ uid:'ultron', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'warmachine', typeId:'tech', stars: 3 },\r\n\t{ uid:'warmachine', typeId:'tech', stars: 4 },\r\n\r\n\t{ uid:'colossus', typeId:'mutant', stars: 1 },\r\n\t{ uid:'colossus', typeId:'mutant', stars: 2 },\r\n\t{ uid:'colossus', typeId:'mutant', stars: 3 },\r\n\t{ uid:'colossus', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'cyclops', typeId:'mutant', stars: 2 },\r\n\t{ uid:'cyclops', typeId:'mutant', stars: 3 },\r\n\t{ uid:'cyclops', typeId:'mutant', stars: 4 },\r\n\t{ uid:'cyclops', typeId:'mutant', stars: 5 },\r\n\r\n\t{ uid:'deadpool', typeId:'mutant', stars: 2 },\r\n\t{ uid:'deadpool', typeId:'mutant', stars: 3 },\r\n\t{ uid:'deadpool', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'deadpoolxforce', typeId:'mutant', stars: 3 },\r\n\t{ uid:'deadpoolxforce', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'magneto', typeId:'mutant', stars: 2 },\r\n\t{ uid:'magneto', typeId:'mutant', stars: 3 },\r\n\t{ uid:'magneto', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'magnetomarvelnow', typeId:'mutant', stars: 3 },\r\n\t{ uid:'magnetomarvelnow', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'storm', typeId:'mutant', stars: 2 },\r\n\t{ uid:'storm', typeId:'mutant', stars: 3 },\r\n\t{ uid:'storm', typeId:'mutant', stars: 4 },\r\n\t{ uid:'storm', typeId:'mutant', stars: 5 },\r\n\r\n\t{ uid:'wolverine', typeId:'mutant', stars: 1 },\r\n\t{ uid:'wolverine', typeId:'mutant', stars: 2 },\r\n\t{ uid:'wolverine', typeId:'mutant', stars: 3 },\r\n\t{ uid:'wolverine', typeId:'mutant', stars: 4 },\r\n\r\n\t{ uid:'blackpanther', typeId:'skill', stars: 1 },\r\n\t{ uid:'blackpanther', typeId:'skill', stars: 2 },\r\n\t{ uid:'blackpanther', typeId:'skill', stars: 3 },\r\n\t{ uid:'blackpanther', typeId:'skill', stars: 4 },\r\n\t{ uid:'blackpanther', typeId:'skill', stars: 5 },\r\n\r\n\t{ uid:'blackwidow', typeId:'skill', stars: 2 },\r\n\t{ uid:'blackwidow', typeId:'skill', stars: 3 },\r\n\t{ uid:'blackwidow', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'daredevil', typeId:'skill', stars: 3 },\r\n\t{ uid:'daredevil', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'daredevilnetflix', typeId:'skill', stars: 3 },\r\n\t{ uid:'daredevilnetflix', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'elektra', typeId:'skill', stars: 3 },\r\n\t{ uid:'elektra', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'hawkeye', typeId:'skill', stars: 1 },\r\n\t{ uid:'hawkeye', typeId:'skill', stars: 2 },\r\n\t{ uid:'hawkeye', typeId:'skill', stars: 3 },\r\n\t{ uid:'hawkeye', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'moonknight', typeId:'skill', stars: 3 },\r\n\t{ uid:'moonknight', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'punisher', typeId:'skill', stars: 2 },\r\n\t{ uid:'punisher', typeId:'skill', stars: 3 },\r\n\t{ uid:'punisher', typeId:'skill', stars: 4 },\r\n\r\n\t{ uid:'wintersoldier', typeId:'skill', stars: 2 },\r\n\t{ uid:'wintersoldier', typeId:'skill', stars: 3 },\r\n\t{ uid:'wintersoldier', typeId:'skill', stars: 4 },\r\n\t{ uid:'wintersoldier', typeId:'skill', stars: 5 },\r\n\r\n\t{ uid:'abomination', typeId:'science', stars: 2 },\r\n\t{ uid:'abomination', typeId:'science', stars: 3 },\r\n\t{ uid:'abomination', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'antman', typeId:'science', stars: 2 },\r\n\t{ uid:'antman', typeId:'science', stars: 3 },\r\n\t{ uid:'antman', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'captainamerica', typeId:'science', stars: 2 },\r\n\t{ uid:'captainamerica', typeId:'science', stars: 3 },\r\n\t{ uid:'captainamerica', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'captainamericawwii', typeId:'science', stars: 3 },\r\n\t{ uid:'captainamericawwii', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'electro', typeId:'science', stars: 3 },\r\n\t{ uid:'electro', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'hulk', typeId:'science', stars: 1 },\r\n\t{ uid:'hulk', typeId:'science', stars: 2 },\r\n\t{ uid:'hulk', typeId:'science', stars: 3 },\r\n\t{ uid:'hulk', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'joefixit', typeId:'science', stars: 3 },\r\n\t{ uid:'joefixit', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'rhino', typeId:'science', stars: 2 },\r\n\t{ uid:'rhino', typeId:'science', stars: 3 },\r\n\t{ uid:'rhino', typeId:'science', stars: 4 },\r\n\t{ uid:'rhino', typeId:'science', stars: 5 },\r\n\r\n\t{ uid:'spidergwen', typeId:'science', stars: 3 },\r\n\t{ uid:'spidergwen', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'spiderman', typeId:'science', stars: 1 },\r\n\t{ uid:'spiderman', typeId:'science', stars: 2 },\r\n\t{ uid:'spiderman', typeId:'science', stars: 3 },\r\n\t{ uid:'spiderman', typeId:'science', stars: 4 },\r\n\t{ uid:'spiderman', typeId:'science', stars: 5 },\r\n\r\n\t{ uid:'spidermanmorales', typeId:'science', stars: 3 },\r\n\t{ uid:'spidermanmorales', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'yellowjacket', typeId:'science', stars: 2 },\r\n\t{ uid:'yellowjacket', typeId:'science', stars: 3 },\r\n\t{ uid:'yellowjacket', typeId:'science', stars: 4 },\r\n\r\n\t{ uid:'drstrange', typeId:'mystic', stars: 3 },\r\n\t{ uid:'drstrange', typeId:'mystic', stars: 4 },\r\n\r\n\t{ uid:'guillotine', typeId:'mystic', stars: 2 },\r\n\t{ uid:'guillotine', typeId:'mystic', stars: 3 },\r\n\t{ uid:'guillotine', typeId:'mystic', stars: 4 },\r\n\r\n\t{ uid:'ironfist', typeId:'mystic', stars: 2 },\r\n\t{ uid:'ironfist', typeId:'mystic', stars: 3 },\r\n\t{ uid:'ironfist', typeId:'mystic', stars: 4 },\r\n\r\n\t{ uid:'juggernaut', typeId:'mystic', stars: 1 },\r\n\t{ uid:'juggernaut', typeId:'mystic', stars: 2 },\r\n\t{ uid:'juggernaut', typeId:'mystic', stars: 3 },\r\n\t{ uid:'juggernaut', typeId:'mystic', stars: 4 },\r\n\t{ uid:'juggernaut', typeId:'mystic', stars: 5 },\r\n\r\n\t{ uid:'magik', typeId:'mystic', stars: 2 },\r\n\t{ uid:'magik', typeId:'mystic', stars: 3 },\r\n\t{ uid:'magik', typeId:'mystic', stars: 4 },\r\n\t{ uid:'magik', typeId:'mystic', stars: 5 },\r\n\r\n\t{ uid:'scarletwitch', typeId:'mystic', stars: 1 },\r\n\t{ uid:'scarletwitch', typeId:'mystic', stars: 2 },\r\n\t{ uid:'scarletwitch', typeId:'mystic', stars: 3 },\r\n\t{ uid:'scarletwitch', typeId:'mystic', stars: 4 },\r\n\r\n\t{ uid:'unstoppablecolossus', typeId:'mystic', stars: 2 },\r\n\t{ uid:'unstoppablecolossus', typeId:'mystic', stars: 3 },\r\n\t{ uid:'unstoppablecolossus', typeId:'mystic', stars: 4 },\r\n  \r\n].map((champion) => new Champion(champion));\r\n\r\nconst uids = [ ...new Set(champions.map((champion) => champion.attr.uid)) ];\r\n\r\nexport default champions;\r\nexport { uids };\r\n\n\n\n/** WEBPACK FOOTER **\n ** champions.js\n **/","import Model from './Model.js';\r\n\r\nclass Champion extends Model {\r\n\tconstructor({ uid, stars, typeId, pi }){\r\n\t\tsuper({\r\n\t\t\tuid: 'champion-uid',\r\n\t\t\tstars: 1,\r\n\t\t\ttypeId: 'mutant',\r\n\t\t\tpi: 0,\r\n\t\t}, {\r\n\t\t\tuid,\r\n\t\t\tstars,\r\n\t\t\ttypeId,\r\n\t\t\tpi,\r\n\t\t});\r\n\t}\r\n\r\n\tid(){\r\n\t\treturn `${ this.attr.uid }-${ this.attr.stars }`;\r\n\t}\r\n}\r\n\r\nexport default Champion;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Champion.js\n **/","class Model  {\r\n\tconstructor(defaults = {}, definition){\r\n\t\tthis.attr = { ...defaults, ...definition };\r\n\t}\r\n\r\n\tset(key, value){\r\n\t\tthis.attr[key] = value;\r\n\t}\r\n\r\n\tget(key){\r\n\t\treturn this.attr[key];\r\n\t}\r\n\r\n\ttoJSON(){\r\n\t\treturn this.attr;\r\n\t}\r\n}\r\n\r\nexport default Model;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Model.js\n **/","import Champion from '../model/Champion.js';\r\nimport champions, { uids } from '../data/champions';\r\n\r\nfunction fromStorage(id){\r\n\tlet array = [];\r\n\tif(localStorage){\r\n\t\tconst string = localStorage.getItem('roster');\r\n\t\tarray = JSON.parse(string) || [];\r\n\t\tarray = array.map((champion) => new Champion(champion));\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nfunction toStorage(id, object){\r\n\tif(localStorage){\r\n\t\tlocalStorage.setItem('roster', JSON.stringify(object));\r\n\t}\r\n}\r\n\r\nlet rosterMap;\r\nlet roster =  fromStorage('roster');\r\n\r\nfunction all() {\r\n\treturn roster.slice();\r\n}\r\n\r\nfunction filter(filter) {\r\n\treturn roster.slice();\r\n}\r\n\r\nfunction available(stars) {\r\n\tconst available = champions.filter((champion) => (\r\n\t\tchampion.attr.stars === stars && !rosterMap[ champion.id() ]\r\n\t));\r\n\treturn available;\r\n}\r\n\r\nfunction update() {\r\n\trosterMap = {};\r\n\tfor(const champion of roster)\r\n\t\trosterMap[ champion.id() ] = true;\r\n}\r\n\r\nfunction addAll(stars) {\r\n\tconst champions = available(stars);\r\n\tfor(const champion of champions)\r\n\t\troster.push(new Champion({ ...champion.attr }))\r\n\ttoStorage('roster', roster);\r\n\tupdate();\r\n}\r\n\r\nfunction add(uid, stars) {\r\n\tconst champion = champions.find((champion) => (champion.attr.uid === uid && champion.attr.stars === stars));\r\n\tif(rosterMap[ champion.id() ])\r\n\t\treturn;\r\n\troster.push(new Champion({ ...champion.attr }))\r\n\ttoStorage('roster', roster);\r\n\tupdate();\r\n}\r\n\r\nfunction remove(uid, stars) {\r\n\tconst champion = roster.find((champion) => (champion.attr.uid === uid && champion.attr.stars === stars));\r\n\tif(champion) {\r\n\t\tconst index = roster.indexOf(champion);\r\n\t\tif(index) {\r\n\t\t\troster.splice(index, 1);\r\n\t\t\ttoStorage('roster', roster);\r\n\t\t}\r\n\t}\r\n\tupdate();\r\n}\r\n\r\nfunction clear() {\r\n\troster = [];\r\n\ttoStorage('roster', roster);\r\n\tupdate();\r\n}\r\n\r\nupdate();\r\nexport default {\r\n\tall,\r\n\tfilter,\r\n\tavailable,\r\n\tadd,\r\n\taddAll,\r\n\tremove,\r\n\tclear,\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** roster.js\n **/","import { Router } from 'director';\r\n\r\nexport default new Router();\r\n\n\n\n/** WEBPACK FOOTER **\n ** router.js\n **/","\n\n//\n// Generated on Tue Dec 16 2014 12:13:47 GMT+0100 (CET) by Charlie Robbins, Paolo Fragomeni & the Contributors (Using Codesurgeon).\n// Version 1.2.6\n//\n\n(function (exports) {\n\n/*\n * browser.js: Browser specific functionality for director.\n *\n * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.\n * MIT LICENSE\n *\n */\n\nvar dloc = document.location;\n\nfunction dlocHashEmpty() {\n  // Non-IE browsers return '' when the address bar shows '#'; Director's logic\n  // assumes both mean empty.\n  return dloc.hash === '' || dloc.hash === '#';\n}\n\nvar listener = {\n  mode: 'modern',\n  hash: dloc.hash,\n  history: false,\n\n  check: function () {\n    var h = dloc.hash;\n    if (h != this.hash) {\n      this.hash = h;\n      this.onHashChanged();\n    }\n  },\n\n  fire: function () {\n    if (this.mode === 'modern') {\n      this.history === true ? window.onpopstate() : window.onhashchange();\n    }\n    else {\n      this.onHashChanged();\n    }\n  },\n\n  init: function (fn, history) {\n    var self = this;\n    this.history = history;\n\n    if (!Router.listeners) {\n      Router.listeners = [];\n    }\n\n    function onchange(onChangeEvent) {\n      for (var i = 0, l = Router.listeners.length; i < l; i++) {\n        Router.listeners[i](onChangeEvent);\n      }\n    }\n\n    //note IE8 is being counted as 'modern' because it has the hashchange event\n    if ('onhashchange' in window && (document.documentMode === undefined\n      || document.documentMode > 7)) {\n      // At least for now HTML5 history is available for 'modern' browsers only\n      if (this.history === true) {\n        // There is an old bug in Chrome that causes onpopstate to fire even\n        // upon initial page load. Since the handler is run manually in init(),\n        // this would cause Chrome to run it twise. Currently the only\n        // workaround seems to be to set the handler after the initial page load\n        // http://code.google.com/p/chromium/issues/detail?id=63040\n        setTimeout(function() {\n          window.onpopstate = onchange;\n        }, 500);\n      }\n      else {\n        window.onhashchange = onchange;\n      }\n      this.mode = 'modern';\n    }\n    else {\n      //\n      // IE support, based on a concept by Erik Arvidson ...\n      //\n      var frame = document.createElement('iframe');\n      frame.id = 'state-frame';\n      frame.style.display = 'none';\n      document.body.appendChild(frame);\n      this.writeFrame('');\n\n      if ('onpropertychange' in document && 'attachEvent' in document) {\n        document.attachEvent('onpropertychange', function () {\n          if (event.propertyName === 'location') {\n            self.check();\n          }\n        });\n      }\n\n      window.setInterval(function () { self.check(); }, 50);\n\n      this.onHashChanged = onchange;\n      this.mode = 'legacy';\n    }\n\n    Router.listeners.push(fn);\n\n    return this.mode;\n  },\n\n  destroy: function (fn) {\n    if (!Router || !Router.listeners) {\n      return;\n    }\n\n    var listeners = Router.listeners;\n\n    for (var i = listeners.length - 1; i >= 0; i--) {\n      if (listeners[i] === fn) {\n        listeners.splice(i, 1);\n      }\n    }\n  },\n\n  setHash: function (s) {\n    // Mozilla always adds an entry to the history\n    if (this.mode === 'legacy') {\n      this.writeFrame(s);\n    }\n\n    if (this.history === true) {\n      window.history.pushState({}, document.title, s);\n      // Fire an onpopstate event manually since pushing does not obviously\n      // trigger the pop event.\n      this.fire();\n    } else {\n      dloc.hash = (s[0] === '/') ? s : '/' + s;\n    }\n    return this;\n  },\n\n  writeFrame: function (s) {\n    // IE support...\n    var f = document.getElementById('state-frame');\n    var d = f.contentDocument || f.contentWindow.document;\n    d.open();\n    d.write(\"<script>_hash = '\" + s + \"'; onload = parent.listener.syncHash;<script>\");\n    d.close();\n  },\n\n  syncHash: function () {\n    // IE support...\n    var s = this._hash;\n    if (s != dloc.hash) {\n      dloc.hash = s;\n    }\n    return this;\n  },\n\n  onHashChanged: function () {}\n};\n\nvar Router = exports.Router = function (routes) {\n  if (!(this instanceof Router)) return new Router(routes);\n\n  this.params   = {};\n  this.routes   = {};\n  this.methods  = ['on', 'once', 'after', 'before'];\n  this.scope    = [];\n  this._methods = {};\n\n  this._insert = this.insert;\n  this.insert = this.insertEx;\n\n  this.historySupport = (window.history != null ? window.history.pushState : null) != null\n\n  this.configure();\n  this.mount(routes || {});\n};\n\nRouter.prototype.init = function (r) {\n  var self = this\n    , routeTo;\n  this.handler = function(onChangeEvent) {\n    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;\n    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');\n    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);\n  };\n\n  listener.init(this.handler, this.history);\n\n  if (this.history === false) {\n    if (dlocHashEmpty() && r) {\n      dloc.hash = r;\n    } else if (!dlocHashEmpty()) {\n      self.dispatch('on', '/' + dloc.hash.replace(/^(#\\/|#|\\/)/, ''));\n    }\n  }\n  else {\n    if (this.convert_hash_in_init) {\n      // Use hash as route\n      routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;\n      if (routeTo) {\n        window.history.replaceState({}, document.title, routeTo);\n      }\n    }\n    else {\n      // Use canonical url\n      routeTo = this.getPath();\n    }\n\n    // Router has been initialized, but due to the chrome bug it will not\n    // yet actually route HTML5 history state changes. Thus, decide if should route.\n    if (routeTo || this.run_in_init === true) {\n      this.handler();\n    }\n  }\n\n  return this;\n};\n\nRouter.prototype.explode = function () {\n  var v = this.history === true ? this.getPath() : dloc.hash;\n  if (v.charAt(1) === '/') { v=v.slice(1) }\n  return v.slice(1, v.length).split(\"/\");\n};\n\nRouter.prototype.setRoute = function (i, v, val) {\n  var url = this.explode();\n\n  if (typeof i === 'number' && typeof v === 'string') {\n    url[i] = v;\n  }\n  else if (typeof val === 'string') {\n    url.splice(i, v, s);\n  }\n  else {\n    url = [i];\n  }\n\n  listener.setHash(url.join('/'));\n  return url;\n};\n\n//\n// ### function insertEx(method, path, route, parent)\n// #### @method {string} Method to insert the specific `route`.\n// #### @path {Array} Parsed path to insert the `route` at.\n// #### @route {Array|function} Route handlers to insert.\n// #### @parent {Object} **Optional** Parent \"routes\" to insert into.\n// insert a callback that will only occur once per the matched route.\n//\nRouter.prototype.insertEx = function(method, path, route, parent) {\n  if (method === \"once\") {\n    method = \"on\";\n    route = function(route) {\n      var once = false;\n      return function() {\n        if (once) return;\n        once = true;\n        return route.apply(this, arguments);\n      };\n    }(route);\n  }\n  return this._insert(method, path, route, parent);\n};\n\nRouter.prototype.getRoute = function (v) {\n  var ret = v;\n\n  if (typeof v === \"number\") {\n    ret = this.explode()[v];\n  }\n  else if (typeof v === \"string\"){\n    var h = this.explode();\n    ret = h.indexOf(v);\n  }\n  else {\n    ret = this.explode();\n  }\n\n  return ret;\n};\n\nRouter.prototype.destroy = function () {\n  listener.destroy(this.handler);\n  return this;\n};\n\nRouter.prototype.getPath = function () {\n  var path = window.location.pathname;\n  if (path.substr(0, 1) !== '/') {\n    path = '/' + path;\n  }\n  return path;\n};\nfunction _every(arr, iterator) {\n  for (var i = 0; i < arr.length; i += 1) {\n    if (iterator(arr[i], i, arr) === false) {\n      return;\n    }\n  }\n}\n\nfunction _flatten(arr) {\n  var flat = [];\n  for (var i = 0, n = arr.length; i < n; i++) {\n    flat = flat.concat(arr[i]);\n  }\n  return flat;\n}\n\nfunction _asyncEverySeries(arr, iterator, callback) {\n  if (!arr.length) {\n    return callback();\n  }\n  var completed = 0;\n  (function iterate() {\n    iterator(arr[completed], function(err) {\n      if (err || err === false) {\n        callback(err);\n        callback = function() {};\n      } else {\n        completed += 1;\n        if (completed === arr.length) {\n          callback();\n        } else {\n          iterate();\n        }\n      }\n    });\n  })();\n}\n\nfunction paramifyString(str, params, mod) {\n  mod = str;\n  for (var param in params) {\n    if (params.hasOwnProperty(param)) {\n      mod = params[param](str);\n      if (mod !== str) {\n        break;\n      }\n    }\n  }\n  return mod === str ? \"([._a-zA-Z0-9-%()]+)\" : mod;\n}\n\nfunction regifyString(str, params) {\n  var matches, last = 0, out = \"\";\n  while (matches = str.substr(last).match(/[^\\w\\d\\- %@&]*\\*[^\\w\\d\\- %@&]*/)) {\n    last = matches.index + matches[0].length;\n    matches[0] = matches[0].replace(/^\\*/, \"([_.()!\\\\ %@&a-zA-Z0-9-]+)\");\n    out += str.substr(0, matches.index) + matches[0];\n  }\n  str = out += str.substr(last);\n  var captures = str.match(/:([^\\/]+)/ig), capture, length;\n  if (captures) {\n    length = captures.length;\n    for (var i = 0; i < length; i++) {\n      capture = captures[i];\n      if (capture.slice(0, 2) === \"::\") {\n        str = capture.slice(1);\n      } else {\n        str = str.replace(capture, paramifyString(capture, params));\n      }\n    }\n  }\n  return str;\n}\n\nfunction terminator(routes, delimiter, start, stop) {\n  var last = 0, left = 0, right = 0, start = (start || \"(\").toString(), stop = (stop || \")\").toString(), i;\n  for (i = 0; i < routes.length; i++) {\n    var chunk = routes[i];\n    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {\n      left = chunk.indexOf(start, last);\n      right = chunk.indexOf(stop, last);\n      if (~left && !~right || !~left && ~right) {\n        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);\n        routes = [ tmp ].concat(routes.slice((i || 1) + 1));\n      }\n      last = (right > left ? right : left) + 1;\n      i = 0;\n    } else {\n      last = 0;\n    }\n  }\n  return routes;\n}\n\nvar QUERY_SEPARATOR = /\\?.*/;\n\nRouter.prototype.configure = function(options) {\n  options = options || {};\n  for (var i = 0; i < this.methods.length; i++) {\n    this._methods[this.methods[i]] = true;\n  }\n  this.recurse = options.recurse || this.recurse || false;\n  this.async = options.async || false;\n  this.delimiter = options.delimiter || \"/\";\n  this.strict = typeof options.strict === \"undefined\" ? true : options.strict;\n  this.notfound = options.notfound;\n  this.resource = options.resource;\n  this.history = options.html5history && this.historySupport || false;\n  this.run_in_init = this.history === true && options.run_handler_in_init !== false;\n  this.convert_hash_in_init = this.history === true && options.convert_hash_in_init !== false;\n  this.every = {\n    after: options.after || null,\n    before: options.before || null,\n    on: options.on || null\n  };\n  return this;\n};\n\nRouter.prototype.param = function(token, matcher) {\n  if (token[0] !== \":\") {\n    token = \":\" + token;\n  }\n  var compiled = new RegExp(token, \"g\");\n  this.params[token] = function(str) {\n    return str.replace(compiled, matcher.source || matcher);\n  };\n  return this;\n};\n\nRouter.prototype.on = Router.prototype.route = function(method, path, route) {\n  var self = this;\n  if (!route && typeof path == \"function\") {\n    route = path;\n    path = method;\n    method = \"on\";\n  }\n  if (Array.isArray(path)) {\n    return path.forEach(function(p) {\n      self.on(method, p, route);\n    });\n  }\n  if (path.source) {\n    path = path.source.replace(/\\\\\\//ig, \"/\");\n  }\n  if (Array.isArray(method)) {\n    return method.forEach(function(m) {\n      self.on(m.toLowerCase(), path, route);\n    });\n  }\n  path = path.split(new RegExp(this.delimiter));\n  path = terminator(path, this.delimiter);\n  this.insert(method, this.scope.concat(path), route);\n};\n\nRouter.prototype.path = function(path, routesFn) {\n  var self = this, length = this.scope.length;\n  if (path.source) {\n    path = path.source.replace(/\\\\\\//ig, \"/\");\n  }\n  path = path.split(new RegExp(this.delimiter));\n  path = terminator(path, this.delimiter);\n  this.scope = this.scope.concat(path);\n  routesFn.call(this, this);\n  this.scope.splice(length, path.length);\n};\n\nRouter.prototype.dispatch = function(method, path, callback) {\n  var self = this, fns = this.traverse(method, path.replace(QUERY_SEPARATOR, \"\"), this.routes, \"\"), invoked = this._invoked, after;\n  this._invoked = true;\n  if (!fns || fns.length === 0) {\n    this.last = [];\n    if (typeof this.notfound === \"function\") {\n      this.invoke([ this.notfound ], {\n        method: method,\n        path: path\n      }, callback);\n    }\n    return false;\n  }\n  if (this.recurse === \"forward\") {\n    fns = fns.reverse();\n  }\n  function updateAndInvoke() {\n    self.last = fns.after;\n    self.invoke(self.runlist(fns), self, callback);\n  }\n  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];\n  if (after && after.length > 0 && invoked) {\n    if (this.async) {\n      this.invoke(after, this, updateAndInvoke);\n    } else {\n      this.invoke(after, this);\n      updateAndInvoke();\n    }\n    return true;\n  }\n  updateAndInvoke();\n  return true;\n};\n\nRouter.prototype.invoke = function(fns, thisArg, callback) {\n  var self = this;\n  var apply;\n  if (this.async) {\n    apply = function(fn, next) {\n      if (Array.isArray(fn)) {\n        return _asyncEverySeries(fn, apply, next);\n      } else if (typeof fn == \"function\") {\n        fn.apply(thisArg, (fns.captures || []).concat(next));\n      }\n    };\n    _asyncEverySeries(fns, apply, function() {\n      if (callback) {\n        callback.apply(thisArg, arguments);\n      }\n    });\n  } else {\n    apply = function(fn) {\n      if (Array.isArray(fn)) {\n        return _every(fn, apply);\n      } else if (typeof fn === \"function\") {\n        return fn.apply(thisArg, fns.captures || []);\n      } else if (typeof fn === \"string\" && self.resource) {\n        self.resource[fn].apply(thisArg, fns.captures || []);\n      }\n    };\n    _every(fns, apply);\n  }\n};\n\nRouter.prototype.traverse = function(method, path, routes, regexp, filter) {\n  var fns = [], current, exact, match, next, that;\n  function filterRoutes(routes) {\n    if (!filter) {\n      return routes;\n    }\n    function deepCopy(source) {\n      var result = [];\n      for (var i = 0; i < source.length; i++) {\n        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];\n      }\n      return result;\n    }\n    function applyFilter(fns) {\n      for (var i = fns.length - 1; i >= 0; i--) {\n        if (Array.isArray(fns[i])) {\n          applyFilter(fns[i]);\n          if (fns[i].length === 0) {\n            fns.splice(i, 1);\n          }\n        } else {\n          if (!filter(fns[i])) {\n            fns.splice(i, 1);\n          }\n        }\n      }\n    }\n    var newRoutes = deepCopy(routes);\n    newRoutes.matched = routes.matched;\n    newRoutes.captures = routes.captures;\n    newRoutes.after = routes.after.filter(filter);\n    applyFilter(newRoutes);\n    return newRoutes;\n  }\n  if (path === this.delimiter && routes[method]) {\n    next = [ [ routes.before, routes[method] ].filter(Boolean) ];\n    next.after = [ routes.after ].filter(Boolean);\n    next.matched = true;\n    next.captures = [];\n    return filterRoutes(next);\n  }\n  for (var r in routes) {\n    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === \"object\" && !Array.isArray(routes[r]))) {\n      current = exact = regexp + this.delimiter + r;\n      if (!this.strict) {\n        exact += \"[\" + this.delimiter + \"]?\";\n      }\n      match = path.match(new RegExp(\"^\" + exact));\n      if (!match) {\n        continue;\n      }\n      if (match[0] && match[0] == path && routes[r][method]) {\n        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];\n        next.after = [ routes[r].after ].filter(Boolean);\n        next.matched = true;\n        next.captures = match.slice(1);\n        if (this.recurse && routes === this.routes) {\n          next.push([ routes.before, routes.on ].filter(Boolean));\n          next.after = next.after.concat([ routes.after ].filter(Boolean));\n        }\n        return filterRoutes(next);\n      }\n      next = this.traverse(method, path, routes[r], current);\n      if (next.matched) {\n        if (next.length > 0) {\n          fns = fns.concat(next);\n        }\n        if (this.recurse) {\n          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));\n          next.after = next.after.concat([ routes[r].after ].filter(Boolean));\n          if (routes === this.routes) {\n            fns.push([ routes[\"before\"], routes[\"on\"] ].filter(Boolean));\n            next.after = next.after.concat([ routes[\"after\"] ].filter(Boolean));\n          }\n        }\n        fns.matched = true;\n        fns.captures = next.captures;\n        fns.after = next.after;\n        return filterRoutes(fns);\n      }\n    }\n  }\n  return false;\n};\n\nRouter.prototype.insert = function(method, path, route, parent) {\n  var methodType, parentType, isArray, nested, part;\n  path = path.filter(function(p) {\n    return p && p.length > 0;\n  });\n  parent = parent || this.routes;\n  part = path.shift();\n  if (/\\:|\\*/.test(part) && !/\\\\d|\\\\w/.test(part)) {\n    part = regifyString(part, this.params);\n  }\n  if (path.length > 0) {\n    parent[part] = parent[part] || {};\n    return this.insert(method, path, route, parent[part]);\n  }\n  if (!part && !path.length && parent === this.routes) {\n    methodType = typeof parent[method];\n    switch (methodType) {\n     case \"function\":\n      parent[method] = [ parent[method], route ];\n      return;\n     case \"object\":\n      parent[method].push(route);\n      return;\n     case \"undefined\":\n      parent[method] = route;\n      return;\n    }\n    return;\n  }\n  parentType = typeof parent[part];\n  isArray = Array.isArray(parent[part]);\n  if (parent[part] && !isArray && parentType == \"object\") {\n    methodType = typeof parent[part][method];\n    switch (methodType) {\n     case \"function\":\n      parent[part][method] = [ parent[part][method], route ];\n      return;\n     case \"object\":\n      parent[part][method].push(route);\n      return;\n     case \"undefined\":\n      parent[part][method] = route;\n      return;\n    }\n  } else if (parentType == \"undefined\") {\n    nested = {};\n    nested[method] = route;\n    parent[part] = nested;\n    return;\n  }\n  throw new Error(\"Invalid route context: \" + parentType);\n};\n\n\n\nRouter.prototype.extend = function(methods) {\n  var self = this, len = methods.length, i;\n  function extend(method) {\n    self._methods[method] = true;\n    self[method] = function() {\n      var extra = arguments.length === 1 ? [ method, \"\" ] : [ method ];\n      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));\n    };\n  }\n  for (i = 0; i < len; i++) {\n    extend(methods[i]);\n  }\n};\n\nRouter.prototype.runlist = function(fns) {\n  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);\n  if (this.every && this.every.on) {\n    runlist.push(this.every.on);\n  }\n  runlist.captures = fns.captures;\n  runlist.source = fns.source;\n  return runlist;\n};\n\nRouter.prototype.mount = function(routes, path) {\n  if (!routes || typeof routes !== \"object\" || Array.isArray(routes)) {\n    return;\n  }\n  var self = this;\n  path = path || [];\n  if (!Array.isArray(path)) {\n    path = path.split(self.delimiter);\n  }\n  function insertOrMount(route, local) {\n    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === \"\" || !self._methods[parts[0]], event = isRoute ? \"on\" : rename;\n    if (isRoute) {\n      rename = rename.slice((rename.match(new RegExp(\"^\" + self.delimiter)) || [ \"\" ])[0].length);\n      parts.shift();\n    }\n    if (isRoute && routeType === \"object\" && !Array.isArray(routes[route])) {\n      local = local.concat(parts);\n      self.mount(routes[route], local);\n      return;\n    }\n    if (isRoute) {\n      local = local.concat(rename.split(self.delimiter));\n      local = terminator(local, self.delimiter);\n    }\n    self.insert(event, local, routes[route]);\n  }\n  for (var route in routes) {\n    if (routes.hasOwnProperty(route)) {\n      insertOrMount(route, path.slice(0));\n    }\n  }\n};\n\n\n\n}(typeof exports === \"object\" ? exports : window));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/director/build/director.js\n ** module id = 41\n ** module chunks = 0\n **/","import './App.scss';\r\nimport Navigation from './Navigation.jsx';\r\nimport Menu from './Menu.jsx';\r\nimport app from '../../service/app.js';\r\nimport m from 'mithril';\r\n\r\nconst App = {\r\n\tview(){\r\n\t\tconst { tabs, tab, pages, menu } = app;\r\n\t\tconst currentPage = tab;\r\n\t\treturn (\r\n\t\t\t<div class=\"app\">\r\n\t\t\t\t<div class=\"pages\">\r\n\t\t\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t\t{tabs.map((tab) => (\r\n\t\t\t\t\t\t<div class={ `page ${ currentPage === tab.id? 'page--current': '' }` }>\r\n\t\t\t\t\t\t\t{ pages[tab.id] }\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Navigation tabs={ tabs } tab={ tab } />\r\n\t\t\t\t<Menu menu={ menu } />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default App;\r\n\n\n\n/** WEBPACK FOOTER **\n ** App.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./App.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./App.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./App.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/app/App.scss\n ** module id = 43\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".app .pages{position:fixed;top:0;left:0;width:100%;height:100%;padding-bottom:54px;box-sizing:border-box}.app .pages .wrapper{position:relative;width:100%;height:100%}.app .pages .wrapper .page{position:absolute;top:0;left:0;width:100%;height:100%;opacity:.001;overflow-y:auto;pointer-events:none;transition:opacity .25s}.app .pages .wrapper .page.page--current{opacity:1;pointer-events:auto}.app .navigation{position:fixed;bottom:0;left:0;width:100%}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/app/App.scss\n ** module id = 44\n ** module chunks = 0\n **/","import './Navigation.scss';\r\nimport roster from '../../service/roster.js';\r\nimport router from '../../service/router.js';\r\nimport lang from '../../service/lang.js';\r\nimport m from 'mithril';\r\n\r\nconst Navigation = {\r\n\tview(ctrl, args) {\r\n\t\tconst { tab: currentTab, tabs } = args;\r\n\r\n\t\tconst buttons = tabs.map((tab) => {\r\n\t\t\tconst className = `navigation-tab ${ (currentTab === tab.id)? 'navigation-tab--current': '' }`;\r\n\t\t\tconst handleClick = (/* evt */) => router.setRoute(`/${ tab.id }`);\r\n\t\t\tlet icon;\r\n\t\t\tif(tab.icon)\r\n\t\t\t\ticon = (\r\n\t\t\t\t\t<div class=\"icon\">\r\n\t\t\t\t\t\t<i class={ `fa fa-${ tab.icon }` }></i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\treturn (\r\n\t\t\t\t<button class={ className } onclick={ handleClick }>\r\n\t\t\t\t\t{ icon }\r\n\t\t\t\t\t{ lang.get(tab.title) }\r\n\t\t\t\t</button>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<header class={ `navigation navigation--count-${ buttons.length }` }>\r\n\t\t\t\t{ buttons }\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navigation;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Navigation.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Navigation.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Navigation.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Navigation.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/app/Navigation.scss\n ** module id = 46\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".navigation{box-shadow:0 0 16px rgba(0,0,0,.5)}.navigation .navigation-tab{font-size:1.1em;line-height:18px;padding:.5em 0;border:0;background:#f6f6f6;color:#000;text-shadow:0 1px 0 #fff;text-transform:uppercase;font-family:Hanzel,Verdana,Geneva,sans-serif;font-weight:700;cursor:pointer;transition:background .25s,color .25s,text-shadow .25s}.navigation .navigation-tab:hover{background:#eee}.navigation .navigation-tab--current,.navigation .navigation-tab--current:hover{background:#38c;color:#fff;text-shadow:0 1px 0 #000;cursor:default}.navigation.navigation--count-1 .navigation-tab{width:100%}.navigation.navigation--count-2 .navigation-tab{width:50%}.navigation.navigation--count-3 .navigation-tab{width:33.334%}.navigation.navigation--count-4 .navigation-tab{width:25%}.navigation.navigation--count-5 .navigation-tab{width:20%}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/app/Navigation.scss\n ** module id = 47\n ** module chunks = 0\n **/","import en from '../lang/en.js';\r\nimport es from '../lang/es.js';\r\nimport ru from '../lang/ru.js';\r\nimport m from 'mithril';\r\n\r\nconst lang = {\r\n\tcurrent: 'en',\r\n\tmessages: {\r\n\t\ten,\r\n\t\tes,\r\n\t\tru,\r\n\t},\r\n\tchange(lang){\r\n\t\tif(this.messages[lang]){\r\n\t\t\tthis.current = lang;\r\n  \t\t\tm.redraw();\r\n\t\t}\r\n\t},\r\n\tget(id, fallback = id){\r\n\t\treturn this.messages[this.current][id] || fallback;\r\n\t}\r\n};\r\n\r\nexport default lang;\r\n\n\n\n/** WEBPACK FOOTER **\n ** lang.js\n **/","export default {\r\n    lang: 'English',\r\n\r\n    //Champion name\r\n    'champion-blackbolt-name': 'Black Bolt',\r\n    'champion-captainmarvel-name': 'Captain Marvel',\r\n    'champion-drax-name': 'Drax',\r\n    'champion-gamora-name': 'Gamora',\r\n    'champion-msmarvel-name': 'Ms. Marvel',\r\n    'champion-ronan-name': 'Ronan',\r\n    'champion-spidermanblack-name': 'Spider-Man Symbiote',\r\n    'champion-superiorironman-name': 'Superior Iron Man',\r\n    'champion-thor-name': 'Thor',\r\n    'champion-thorjanefoster-name': 'Thor Jane Foster',\r\n    'champion-venom-name': 'Venom',\r\n    'champion-ironman-name': 'Iron Man',\r\n    'champion-ironpatriot-name': 'Iron Patriot',\r\n    'champion-hulkbuster-name': 'Hulkbuster',\r\n    'champion-kang-name': 'Kang',\r\n    'champion-rocket-name': 'Rocket Raccoon',\r\n    'champion-starlord-name': 'Star-Lord',\r\n    'champion-vision-name': 'Vision',\r\n    'champion-thevision-name': 'The Vision',\r\n    'champion-ultron-name': 'Ultron',\r\n    'champion-warmachine-name': 'War Machine',\r\n    'champion-colossus-name': 'Colossus',\r\n    'champion-cyclops-name': 'Cyclops',\r\n    'champion-deadpool-name': 'Deadpool',\r\n    'champion-deadpoolxforce-name': 'Deadpool X-Force',\r\n    'champion-magneto-name': 'Magneto',\r\n    'champion-magnetomarvelnow-name': 'Magneto Marvel Now',\r\n    'champion-storm-name': 'Storm',\r\n    'champion-wolverine-name': 'Wolverine',\r\n    'champion-blackpanther-name': 'Black Panther',\r\n    'champion-blackwidow-name': 'Black Widow',\r\n    'champion-daredevil-name': 'Daredevil',\r\n    'champion-daredevilnetflix-name': 'Daredevil',\r\n    'champion-elektra-name': 'Elektra',\r\n    'champion-hawkeye-name': 'Hawkeye',\r\n    'champion-moonknight-name': 'Moon Knight',\r\n    'champion-punisher-name': 'Punisher',\r\n    'champion-wintersoldier-name': 'Winter Soldier',\r\n    'champion-abomination-name': 'Abomination',\r\n    'champion-antman-name': 'Ant-Man',\r\n    'champion-captainamerica-name': 'Captain America',\r\n    'champion-captainamericawwii-name': 'Captain America WWII',\r\n    'champion-electro-name': 'Electro',\r\n    'champion-hulk-name': 'Hulk',\r\n    'champion-joefixit-name': 'Joe Fixit',\r\n    'champion-rhino-name': 'Rhino',\r\n    'champion-spidergwen-name': 'Spider-Gwen',\r\n    'champion-spiderman-name': 'Spider-Man',\r\n    'champion-spidermanmorales-name': 'Spider-Man Morales',\r\n    'champion-yellowjacket-name': 'YellowJacket',\r\n    'champion-drstrange-name': 'Doctor Strange',\r\n    'champion-ironfist-name': 'Iron Fist',\r\n    'champion-guillotine-name': 'Guillotine',\r\n    'champion-juggernaut-name': 'Juggernaut',\r\n    'champion-magik-name': 'Magik',\r\n    'champion-scarletwitch-name': 'Scarlet Witch',\r\n    'champion-unstoppablecolossus-name': 'Unstoppable Colossus',\r\n\r\n    //Champion shortname\r\n    'champion-captainmarvel-shortname': 'Cap. Marvel',\r\n    'champion-spidermanblack-shortname': 'Spider-Man',\r\n    'champion-superiorironman-shortname': 'Sup. Iron Man',\r\n    'champion-thorjanefoster-shortname': 'Thor',\r\n    'champion-rocket-shortname': 'Rocket',\r\n    'champion-deadpoolxforce-shortname': 'Deadpool',\r\n    'champion-magnetomarvelnow-shortname': 'Magneto',\r\n    'champion-captainamerica-shortname': 'Cap. America',\r\n    'champion-captainamericawwii-shortname': 'Cap. America',\r\n    'champion-spidermanmorales-shortname': 'Spider-Man',\r\n    'champion-drstrange-shortname': 'Dr. Strange',\r\n    'champion-unstoppablecolossus-shortname': 'Unst. Colossus',\r\n\r\n    //Ability name\r\n    'ability-stun-name': 'Stun',\r\n    'ability-fatigue-name': 'Fatigue',\r\n    'ability-powerdrain-name': 'Power Drain',\r\n    'ability-powerburn-name': 'Power Burn',\r\n    'ability-bleed-name': 'Bleed',\r\n    'ability-cauterize-name': 'Cauterize',\r\n    'ability-armorbreak-name': 'Armor Break',\r\n    'ability-fury-name': 'Fury',\r\n    'ability-regeneration-name': 'Regeneration',\r\n    'ability-unstoppable-name': 'Unstoppable',\r\n    'ability-poison-name': 'Poison',\r\n    'ability-armorup-name': 'Armor Up',\r\n    'ability-plusdamage-name': 'Increased Damage',\r\n    'ability-pluscritrate-name': 'Increased Critical Rate',\r\n    'ability-pluscritdamage-name': 'Increased Critical Damage',\r\n    'ability-poisonimmunity-name': 'Poison Immunity',\r\n    'ability-bleedimmunity-name': 'Bleed Immunity',\r\n\r\n    //Effect name\r\n    'effect-attack-name': 'Attack',\r\n    'effect-stun-name': 'Stun',\r\n    'effect-critrate-name': 'Critical Rate',\r\n    'effect-critdamage-name': 'Critical Damage',\r\n    'effect-powergain-name': 'Power Gain',\r\n    'effect-powersteal-name': 'Power Steal',\r\n    'effect-perfectblock-name': 'Perfect Block',\r\n    'effect-block-name': 'Block Proficiency',\r\n    'effect-armor-name': 'Armor',\r\n    'effect-health-name': 'Health',\r\n    'effect-healthsteal-name': 'Health Steal',\r\n\r\n    //Effect description\r\n    'effect-attack-description': 'Increases damage on all attacks.',\r\n    'effect-stun-description': 'Chance to Stun on special attacks.',\r\n    'effect-critrate-description': 'Increases the chance for Critical hit.',\r\n    'effect-critdamage-description': 'Increases damage multiplier for Critical hits.',\r\n    'effect-powergain-description': 'Gain additional Power (used to trigger a special) whenever Power is gained.',\r\n    'effect-powersteal-description': 'Gain Power (used to trigger a special) when attacking.',\r\n    'effect-perfectblock-description': 'Increased chance to Perfect Block for 0 damage.',\r\n    'effect-block-description': 'Increases Block effectiveness for less damage taken.',\r\n    'effect-armor-description': 'Increases Armor so that all damage taken is decreased.',\r\n    'effect-health-description': 'Increases champion Health.',\r\n    'effect-healthsteal-description': 'Gain Health when attacking.',\r\n\r\n    //Type name\r\n    'type-cosmic-name': 'Cosmic',\r\n    'type-tech-name': 'Tech',\r\n    'type-mutant-name': 'Mutant',\r\n    'type-skill-name': 'Skill',\r\n    'type-science-name': 'Science',\r\n    'type-mystic-name': 'Mystic',\r\n\r\n    //Crystal name\r\n    'crystal-versus-name': 'Versus',\r\n    'crystal-arena-name': 'Arena',\r\n    'crystal-alliance-name': 'Alliance',\r\n    'crystal-daily-name': 'Daily',\r\n    'crystal-2star-name': '2-Star',\r\n    'crystal-premium-name': 'Premium',\r\n    'crystal-3star-name': '3-Star',\r\n    'crystal-4star-name': '4-Star',\r\n\r\n    //Crystal description (keep $CURRENCY$ tokens for image replacement)\r\n    'crystal-versus-description': 'Acquired when you win a versus match.',\r\n    'crystal-arena-description': 'Buy for 2000 $BATTLECHIPS$.',\r\n    'crystal-alliance-description': 'Buy for 1000 $LOYALTY$.',\r\n    'crystal-daily-description': 'Acquired once every 24 hours.',\r\n    'crystal-premium-description': 'Buy for 100 $UNITS$.',\r\n    'crystal-3star-description': 'Buy for 400 $UNITS$, rare event.',\r\n    'crystal-4star-description': 'Buy for 2500 $UNITS$, very rare event.',\r\n\r\n    //Algorithm name\r\n    'algorithm-quest-name': 'Quest',\r\n    'algorithm-arena-name': 'Arena',\r\n\r\n    //Algorithm description\r\n    'algorithm-quest-description': 'SLOW. This picks the best team mathematically given all parameters.',\r\n    'algorithm-arena-description': 'FAST. This chooses the best combinations of teams possible.',\r\n\r\n    //Listing words\r\n    'of': 'of',\r\n    'with': 'with',\r\n    'found': 'Found',\r\n    'extras': 'Extras',\r\n\r\n    //Common words/sections\r\n    'team': 'Team',\r\n    'teams': 'Teams',\r\n\r\n    'guide': 'Guide',\r\n    'guides': 'Guides',\r\n\r\n    'champion': 'Champion',\r\n    'champions': 'Champions',\r\n\r\n    'synergy': 'Synergy',\r\n    'synergies': 'Synergies',\r\n\r\n    'crystal': 'Crystal',\r\n    'crystals': 'Crystals',\r\n\r\n    'roster': 'Roster',\r\n\r\n    //Roster Panel\r\n    'manage': 'Manage',\r\n    'add-champion': 'Add a Champion',\r\n    'import-csv': 'Import .csv',\r\n    'export-csv': 'Export .csv',\r\n    'delete-all': 'Delete All',\r\n\r\n    'sort': 'Sort',\r\n    'filter': 'Filter',\r\n\r\n    //Roster Config\r\n    'stars': 'Stars',\r\n    'type': 'Type',\r\n    'name': 'Name',\r\n\r\n    'rank': 'Rank',\r\n    'level': 'Level',\r\n    'awakened': 'Awakened',\r\n    'quest': 'Quest',\r\n    'view-guide': 'View Guide',\r\n\r\n    'delete': 'Delete',\r\n    'cancel': 'Cancel',\r\n\r\n    'ask-delete': 'Are you sure you want to delete',\r\n    'ask-delete-all': 'Are you sure you want to delete all of your champions?',\r\n    'cannot-undo': 'This action cannot be undone.',\r\n\r\n    //Team Panel\r\n    'advanced-settings': 'Advanced Settings',\r\n    'team-size': 'Team Size',\r\n    'algorithm': 'Algorithm',\r\n    'arena': 'Arena',\r\n    'build': 'Build',\r\n\r\n    //Add Champion Page\r\n    'add-all': 'Add All',\r\n\r\n    //Advanced Settings Page\r\n    'reset-defaults': 'Reset to Defaults',\r\n    'champion-weights': 'Champion Weights',\r\n    'synergy-weights': 'Synergy Weights',\r\n    'duplicate-weights': 'Duplicate Class Weights',\r\n    'choose-preset': 'Choose a preset...',\r\n    'use-levels': 'Calculate using stars / ranks / levels',\r\n\r\n    //Tuples\r\n    'double': 'Double',\r\n    'triple': 'Triple',\r\n    'quadruple': 'Quadruple',\r\n    'quintuple': 'Quintuple',\r\n\r\n    //Guide Page\r\n    'choose-guide': 'Choose a guide',\r\n\r\n    //Options\r\n    'options': 'Options',\r\n    'share-to': 'Share to',\r\n    'facebook': 'Facebook',\r\n    'twitter': 'Twitter',\r\n    'google': 'Google',\r\n    'tools': 'Tools',\r\n    'language': 'Language',\r\n    'synergy-map': 'Synergy Map',    \r\n    'roster-manager': 'Roster Manager',  \r\n\r\n    //Onboarding Messages\r\n    'onboarding-synergies': 'Use the roster manager tool to add more champions to your roster.',\r\n    'onboarding-roster': 'Use the options menu to add new champions',\r\n    'onboarding-teams': 'Use the Build menu create your teams!',\r\n\r\n    //Guide\r\n    'coming-soon': 'Coming Soon...',\r\n    'description': 'Description',\r\n    'gameplay': 'Gameplay',\r\n    'special': 'Special',\r\n    'signature': 'Signature Ability',\r\n    'attack': 'Attack',\r\n    'heavy-attack': 'Heavy Attack',\r\n    'abilities': 'Abilities',\r\n    'passive-abilities': 'Passive Abilities',\r\n\r\n    'rating': 'Rating',\r\n    'grade': 'Grade',\r\n    'strategy': 'Strategy',\r\n    'style': 'Style',\r\n\r\n    'damage-type': 'Damage Type',\r\n    'range': 'Range',\r\n    'note': 'Note',\r\n\r\n    'synergies-external': 'External Synergies',\r\n\r\n    'author': 'Author',\r\n    'profile': 'Profile',\r\n    'profile-reddit': 'Reddit /u/',\r\n    'profile-kabam': 'Kabam Forums',\r\n    'author-credit': 'This guide was written by',\r\n\r\n    'email': 'E-mail',\r\n    \r\n    'none': 'None',\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** en.js\n **/","export default {\r\n    lang: 'Español',\r\n\r\n    //Champion name\r\n    'champion-blackbolt-name': 'Rayo Negro',\r\n    'champion-captainmarvel-name': 'Capitana Marvel',\r\n    'champion-drax-name': 'Drax',\r\n    'champion-gamora-name': 'Gamora',\r\n    'champion-msmarvel-name': 'Ms. Marvel',\r\n    'champion-ronan-name': 'Ronan',\r\n    'champion-spidermanblack-name': 'Spider-Man Simbionte',\r\n    'champion-superiorironman-name': 'Iron Man Superior',\r\n    'champion-thor-name': 'Thor',\r\n    'champion-thorjanefoster-name': 'Thor Jane Foster',\r\n    'champion-venom-name': 'Venom',\r\n    'champion-ironman-name': 'Iron Man',\r\n    'champion-ironpatriot-name': 'Iron Patriot',\r\n    'champion-hulkbuster-name': 'Hulkbuster',\r\n    'champion-kang-name': 'Kang',\r\n    'champion-rocket-name': 'Rocket el Mapache',\r\n    'champion-starlord-name': 'Star-Lord',\r\n    'champion-vision-name': 'Visión',\r\n    'champion-thevision-name': 'La Vision',\r\n    'champion-ultron-name': 'Ultron',\r\n    'champion-warmachine-name': 'Máquina de Guerra',\r\n    'champion-colossus-name': 'Coloso',\r\n    'champion-cyclops-name': 'Cíclope',\r\n    'champion-deadpool-name': 'Deadpool',\r\n    'champion-deadpoolxforce-name': 'Deadpool X-Force',\r\n    'champion-magneto-name': 'Magneto',\r\n    'champion-magnetomarvelnow-name': 'Magneto Marvel Now',\r\n    'champion-storm-name': 'Tormenta',\r\n    'champion-wolverine-name': 'Lobezno',\r\n    'champion-blackpanther-name': 'Pantera Negra',\r\n    'champion-blackwidow-name': 'Viuda Negra',\r\n    'champion-daredevil-name': 'Daredevil',\r\n    'champion-daredevilnetflix-name': 'Daredevil',\r\n    'champion-elektra-name': 'Elektra',\r\n    'champion-hawkeye-name': 'Ojo de Halcon',\r\n    'champion-moonknight-name': 'Caballero Luna',\r\n    'champion-punisher-name': 'Punisher',\r\n    'champion-wintersoldier-name': 'Soldado del Invierno',\r\n    'champion-abomination-name': 'Abominación',\r\n    'champion-antman-name': 'Ant-Man',\r\n    'champion-captainamerica-name': 'Capitán América',\r\n    'champion-captainamericawwii-name': 'Capitán América 2º GM',\r\n    'champion-electro-name': 'Electro',\r\n    'champion-hulk-name': 'Hulk',\r\n    'champion-joefixit-name': 'Joe Fixit',\r\n    'champion-rhino-name': 'Rhino',\r\n    'champion-spidergwen-name': 'Spider-Gwen',\r\n    'champion-spiderman-name': 'Spider-Man',\r\n    'champion-spidermanmorales-name': 'Spider-Man Morales',\r\n    'champion-yellowjacket-name': 'YellowJacket',\r\n    'champion-drstrange-name': 'Dr. Extraño',\r\n    'champion-ironfist-name': 'Puño de Hierro',\r\n    'champion-juggernaut-name': 'Juggernaut',\r\n    'champion-magik-name': 'Magik',\r\n    'champion-scarletwitch-name': 'Bruja Escarlata',\r\n    'champion-unstoppablecolossus-name': 'Coloso Imparable',\r\n\r\n    //Champion shortname\r\n    'champion-captainmarvel-shortname': 'Cap. Marvel',\r\n    'champion-spidermanblack-shortname': 'Spider-Man',\r\n    'champion-superiorironman-shortname': 'Iron Man Sup.',\r\n    'champion-thorjanefoster-shortname': 'Thor',\r\n    'champion-rocket-shortname': 'Rocket',\r\n    'champion-deadpoolxforce-shortname': 'Deadpool',\r\n    'champion-magnetomarvelnow-shortname': 'Magneto',\r\n    'champion-captainamerica-shortname': 'Cap. America',\r\n    'champion-captainamericawwii-shortname': 'Cap. America',\r\n    'champion-spidermanmorales-shortname': 'Spider-Man',\r\n    'champion-unstoppablecolossus-shortname': 'Coloso Imp.',\r\n\r\n    //Effect name\r\n    'effect-attack-name': 'Ataque',\r\n    'effect-stun-name': 'Aturdir',\r\n    'effect-critrate-name': 'Prob. de Golpe Crítico',\r\n    'effect-critdamage-name': 'Daño de Golpe Crítico',\r\n    'effect-powergain-name': 'Acopio de Poder',\r\n    'effect-powersteal-name': 'Robapoderes',\r\n    'effect-perfectblock-name': 'Bloqueo Impecable',\r\n    'effect-block-name': 'Bloqueo Maestro',\r\n    'effect-armor-name': 'Robustez',\r\n    'effect-health-name': 'Curación',\r\n    'effect-healthsteal-name': 'Parásito',\r\n\r\n    //Effect description\r\n    'effect-attack-description': 'Incrementa el daño de todos los ataques.',\r\n    'effect-stun-description': 'Probabilidad de aturdir con ataques especiales.',\r\n    'effect-critrate-description': 'Incrementa la probabilidad para golpes críticos.',\r\n    'effect-critdamage-description': 'Incrementa el daño para golpes críticos.',\r\n    'effect-powergain-description': 'Gana poder adicional (usado para activar un especial) cada vez que se gana poder.',\r\n    'effect-powersteal-description': 'Gana poder adicional (usado para activar un especial) cuando atacas.',\r\n    'effect-perfectblock-description': 'Probabilidad adicional de hacer un bloqueo perfecto con 0 daño.',\r\n    'effect-block-description': 'Incrementa la efectividad del bloqueo para reducir el daño recibido.',\r\n    'effect-armor-description': 'Incrementa la armadura para reducir todo el daño recibido.',\r\n    'effect-health-description': 'Incrementa la salúd del luchador.',\r\n    'effect-healthsteal-description': 'Incrementa la salúd al atacar.',\r\n\r\n    //Type name\r\n    'type-cosmic-name': 'Cósmico',\r\n    'type-tech-name': 'Tecnológico',\r\n    'type-mutant-name': 'Mutante',\r\n    'type-skill-name': 'Habilidad',\r\n    'type-science-name': 'Científico',\r\n    'type-mystic-name': 'Místico',\r\n\r\n    //Crystal name\r\n    'crystal-versus-name': 'Versus',\r\n    'crystal-arena-name': 'Arena',\r\n    'crystal-alliance-name': 'Alianza',\r\n    'crystal-daily-name': 'Diario',\r\n    'crystal-2star-name': '2 Estrellas',\r\n    'crystal-premium-name': 'Premium',\r\n    'crystal-3star-name': '3 Estrellas',\r\n    'crystal-4star-name': '4 Estrellas',\r\n\r\n    //Crystal description (keep $CURRENCY$ tokens for image replacement)\r\n    'crystal-versus-description': 'Obtenido al ganar una pelea versus.',\r\n    'crystal-arena-description': 'Cómpralo por 2000 $BATTLECHIPS$.',\r\n    'crystal-alliance-description': 'Cómpralo por 1000 $LOYALTY$.',\r\n    'crystal-daily-description': 'Adquirido una vez cada 24 horas.',\r\n    'crystal-premium-description': 'Cómpralo por 100 $UNITS$.',\r\n    'crystal-3star-description': 'Cómpralo por 400 $UNITS$, poco común.',\r\n    'crystal-4star-description': 'Cómpralo por 2500 $UNITS$, muy poco común.',\r\n\r\n    //Algorithm name\r\n    'algorithm-greedy-name': 'Egoísta',\r\n    'algorithm-shuffle-name': 'Mixto',\r\n\r\n    //Algorithm description\r\n    'algorithm-greedy-description': 'LENTO. Elige el mejor equipo matemáticamente tomando en cuenta todos los parámetros.',\r\n    'algorithm-shuffle-description': 'RÁPIDO. Elige las mejores combinaciones posibles de equipos.',\r\n\r\n    //Listing words\r\n    'of': 'de',\r\n    'with': 'con',\r\n    'found': 'Encontrado',\r\n    'extras': 'Extras',\r\n\r\n    //Common words/sections\r\n    'team': 'Equipo',\r\n    'teams': 'Equipos',\r\n\r\n    'guide': 'Guía',\r\n    'guides': 'Guías',\r\n\r\n    'champion': 'Luchador',\r\n    'champions': 'Luchadores',\r\n\r\n    'synergy': 'Sinergia',\r\n    'synergies': 'Sinergias',\r\n\r\n    'crystal': 'Cristal',\r\n    'crystals': 'Cristales',\r\n\r\n    'roster': 'Repertorio',\r\n\r\n    //Roster Panel\r\n    'manage': 'Administra',\r\n    'add-champion': 'Añade un Luchador',\r\n    'import-csv': 'Import .csv',\r\n    'export-csv': 'Export .csv',\r\n    'delete-all': 'Borra todo',\r\n\r\n    'sort': 'Clasificar',\r\n    'filter': 'Filtrar',\r\n\r\n    //Roster Config\r\n    'stars': 'Estrellas',\r\n    'type': 'Tipo',\r\n    'name': 'Name',\r\n\r\n    'rank': 'Rango',\r\n    'level': 'Nivel',\r\n    'awakened': 'Despertado',\r\n    'quest': 'Gesta',\r\n    'view-guide': 'Ver Guía',\r\n\r\n    'delete': 'Borrar',\r\n    'cancel': 'Cancelar',\r\n\r\n    'ask-delete': '¿Estas seguro que quieres borrar?',\r\n    'ask-delete-all': '¿Estás seguro que quieres borrar a todos tus luchadores?',\r\n    'cannot-undo': 'Esta acción no puede ser deshecha.',\r\n\r\n    //Team Panel\r\n    'advanced-settings': 'Configuración Avanzada',\r\n    'team-size': 'Tamaño del Equipo',\r\n    'algorithm': 'Algoritmo',\r\n    'arena': 'Arena',\r\n    'build': 'Armar',\r\n\r\n    //Add Champion Page\r\n    'add-all': 'Añadir Todo',\r\n\r\n    //Advanced Settings Page\r\n    'reset-defaults': 'Reiniciar a default',\r\n    'champion-weights': 'Importancia de Luchadores',\r\n    'synergy-weights': 'Importancia de Sinergías',\r\n    'duplicate-weights': 'Importancia de Duplicación',\r\n    'choose-preset': 'Elige un parámetro...',\r\n    'use-levels': 'Calcula usando Estrellas / Rangos / Niveles',\r\n\r\n    //Tuples\r\n    'double': 'Doble',\r\n    'triple': 'Triple',\r\n    'quadruple': 'Cuadruple',\r\n    'quintuple': 'Quintuple',\r\n\r\n    //Guide Page\r\n    'choose-guide': 'Elige una guía',\r\n\r\n    //Options\r\n    'options': 'Opciones',\r\n    'share-to': 'Compartir',\r\n    'facebook': 'Facebook',\r\n    'twitter': 'Twitter',\r\n    'google': 'Google',\r\n    'tools': 'Herramientas',\r\n    'language': 'Idioma',\r\n    'synergy-map': 'Mapa de Sinergias',    \r\n    'roster-manager': 'Administrador de Repertorio',  \r\n\r\n    //Onboarding Messages\r\n    'onboarding-synergies': 'Usa la herramienta Administrador de Repertorio para añadir más luchadores a tu repertorio.',\r\n    'onboarding-roster': 'Usa el menú de opciones para añadir nuevos luchadores',\r\n    'onboarding-teams': '¡Usa el menú Armar para crear tus equipos!',\r\n\r\n    //Guide\r\n    'coming-soon': 'Pronto...',\r\n    'gameplay': 'Gameplay',\r\n    'special': 'Especial',\r\n    'signature': 'Habilidad Especial',\r\n    'heavy-attack': 'Ataque Pesado',\r\n    'abilities': 'Abilidades',\r\n\r\n    'grade': 'Calificación',\r\n    'strategy': 'Estrategia',\r\n\r\n    'damage-type': 'Tipo de daño',\r\n    'range': 'Rango',\r\n    'note': 'Nota',\r\n\r\n    'synergies-external': 'Sinergias Externas',\r\n\r\n    'none': 'Ninguno',\r\n};\r\n// http://collabedit.com/pwxck\r\n\n\n\n/** WEBPACK FOOTER **\n ** es.js\n **/","export default {\n    lang:'Русский',\n  \n    //Champion name \n    'champion-blackbolt-name': 'Черный Гром',\n    'champion-captainmarvel-name': 'Капитан Марвел',\n    'champion-drax-name': 'Дракс',\n    'champion-gamora-name': 'Гамора',\n    'champion-msmarvel-name': 'Мисс Марвел',\n    'champion-ronan-name': 'Ронан',\n    'champion-spidermanblack-name': 'Черный Человек-Паук',\n    'champion-superiorironman-name': 'Высший Железный Человек',\n    'champion-thor-name': 'Тор',\n    'champion-thorjanefoster-name': 'Джейн Фостер',\n    'champion-venom-name': 'Веном',\n    'champion-ironman-name': 'Железный Человек',\n    'champion-ironpatriot-name': 'Железный Патриот',\n    'champion-hulkbuster-name': 'Халкбастер',\n    'champion-kang-name': 'Канг',\n    'champion-rocket-name': 'Реактивный Енот',\n    'champion-starlord-name': 'Звездный Лорд',\n    'champion-vision-name': 'Вижн',\n    'champion-thevision-name': 'Вижн Кино',\n    'champion-ultron-name': 'Альтрон Прайм',\n    'champion-warmachine-name': 'Воитель',\n    'champion-colossus-name': 'Колосс',\n    'champion-cyclops-name': 'Циклоп',\n    'champion-deadpool-name': 'Дедпул',\n    'champion-deadpoolxforce-name': 'Дедпул X-Force',\n    'champion-magneto-name': 'Магнето',\n    'champion-magnetomarvelnow-name': 'Белый Магнето',\n    'champion-storm-name': 'Шторм',\n    'champion-wolverine-name': 'Росомаха',\n    'champion-blackpanther-name': 'Черная Пантера',\n    'champion-blackwidow-name': 'Черная Вдова',\n    'champion-daredevil-name': 'Сорвиголова',\n    'champion-daredevilnetflix-name': 'Сорвиголова Netflix',\n    'champion-elektra-name': 'Электра',\n    'champion-hawkeye-name': 'Соколиный Глаз',\n    'champion-moonknight-name': 'Лунный Рыцарь',\n    'champion-punisher-name': 'Каратель',\n    'champion-wintersoldier-name': 'Зимний Солдат',\n    'champion-abomination-name': 'Мерзость',\n    'champion-antman-name': 'Человек Муравей',\n    'champion-captainamerica-name': 'Капитан Америка',\n    'champion-captainamericawwii-name': 'Капитан Америка WWII',\n    'champion-electro-name': 'Электро',\n    'champion-hulk-name': 'Халк',\n    'champion-joefixit-name': 'Джо Фиксит',\n    'champion-rhino-name': 'Носорог',\n    'champion-spidergwen-name': 'Спайдер Гвен',\n    'champion-spiderman-name': 'Человек-Паук',\n    'champion-spidermanmorales-name': 'Человек-Паук Моралес',\n    'champion-yellowjacket-name': 'Желтый Шершень',\n    'champion-drstrange-name': 'Доктор Стрэндж',\n    'champion-ironfist-name': 'Железный Кулак',\n    'champion-juggernaut-name': 'Джаггернаут',\n    'champion-magik-name': 'Мэджик',\n    'champion-scarletwitch-name': 'Алая Ведьма',\n    'champion-unstoppablecolossus-name': 'Неудержимый Колосс',\n    \n    //Champion shortnames\n    'champion-blackbolt-shortname': 'Гром',\n    'champion-captainmarvel-shortname': 'Кэп Марвел',\n    'champion-drax-shortname': 'Дракс',\n    'champion-gamora-shortname': 'Гамора',\n    'champion-msmarvel-shortname': 'Мисс',\n    'champion-ronan-shortname': 'Ронан',\n    'champion-spidermanblack-shortname': 'Черный Паук',\n    'champion-superiorironman-shortname': 'СЖЧ',\n    'champion-thor-shortname': 'Тор',\n    'champion-thorjanefoster-shortname': 'Джейн Фостер',\n    'champion-venom-shortname': 'Веном',\n    'champion-ironman-shortname': 'ЖЧ',\n    'champion-ironpatriot-shortname': 'ЖП',\n    'champion-hulkbuster-shortname': 'ХБ',\n    'champion-kang-shortname': 'Канг',\n    'champion-rocket-shortname': 'Енот',\n    'champion-starlord-shortname': 'Лорд',\n    'champion-vision-shortname': 'Вижн',\n    'champion-thevision-shortname': 'Вижн Кино',\n    'champion-ultron-shortname': 'Альтрон',\n    'champion-warmachine-shortname': 'Воитель',\n    'champion-colossus-shortname': 'Колосс',\n    'champion-cyclops-shortname': 'Циклоп',\n    'champion-deadpool-shortname': 'Дед',\n    'champion-deadpoolxforce-shortname': 'Дед седой',\n    'champion-magneto-shortname': 'Магнит',\n    'champion-magnetomarvelnow-shortname': 'Белый Магнит',\n    'champion-storm-shortname': 'Шторм',\n    'champion-wolverine-shortname': 'Рося',\n    'champion-blackpanther-shortname': 'Пантера',\n    'champion-blackwidow-shortname': 'Вдова',\n    'champion-daredevil-shortname': 'Сорвиголова',\n    'champion-daredevilnetflix-shortname': 'Сорвиголова Netflix',\n    'champion-elektra-shortname': 'Электра',\n    'champion-hawkeye-shortname': 'Сокол',\n    'champion-moonknight-shortname': 'Лунатик',\n    'champion-punisher-shortname': 'Кара',\n    'champion-wintersoldier-shortname': 'Зимний',\n    'champion-abomination-shortname': 'Мерзость',\n    'champion-antman-shortname': 'Муравей',\n    'champion-captaishortnamerica-shortname': 'Кэп',\n    'champion-captaishortnamericawwii-shortname': 'Кэп ВМВ',\n    'champion-electro-shortname': 'Электрик',\n    'champion-hulk-shortname': 'Халк',\n    'champion-joefixit-shortname': 'Фиксит',\n    'champion-rhino-shortname': 'Носорог',\n    'champion-spidergwen-shortname': 'Гвен',\n    'champion-spiderman-shortname': 'Паук',\n    'champion-spidermanmorales-shortname': 'Моралес',\n    'champion-yellowjacket-shortname': 'Шершень',\n    'champion-drstrange-shortname': 'Док',\n    'champion-ironfist-shortname': 'Кулак',\n    'champion-juggernaut-shortname': 'Джаг',\n    'champion-magik-shortname': 'Мэджик',\n    'champion-scarletwitch-shortname': 'Ведьма',\n    'champion-unstoppablecolossus-shortname': 'Неуд',\n    \n    //Effect name \n    'effect-attack-name': 'Атака',\n    'effect-stun-name': 'Оглушение',\n    'effect-critrate-name': 'Вероятность крит. урона',\n    'effect-critdamage-name': 'Крит. Урон',\n    'effect-powergain-name': 'Увеличение Энергии',\n    'effect-powersteal-name': 'Кража Энергии',\n    'effect-perfectblock-name': 'Идеальный Блок',\n    'effect-block-name': 'Вероятность ид. блока',\n    'effect-armor-name': 'Броня',\n    'effect-health-name': 'Здоровье',\n    'effect-healthsteal-name': 'Кража здоровья',\n    \n    //Effect description \n    'effect-attack-description': 'Увеличение урона на все атаки.',\n    'effect-stun-description': 'Шанс оглушения при спец. атаках.',\n    'effect-critrate-description': 'Увеличение вероятности крит. урона.',\n    'effect-critdamage-description': 'Увеличение критического урона.',\n    'effect-powergain-description': 'Увеличечние энергии (от спец. атак) независимо от атаки.',\n    'effect-powersteal-description': 'Кража энергии (от спец. атак) за счет атаки.',\n    'effect-perfectblock-description': 'Увеличение шанса идеального блока - 0 урона в блоке.',\n    'effect-block-description': 'Увеличение эффективности блокирования - уменьшение урона в блоке.',\n    'effect-armor-description': 'Увеличение брони, тем самым уменьшая получаемый урон.',\n    'effect-health-description': 'Увеличение здоровья чемпиона.',\n    'effect-healthsteal-description': 'Восполнение здоровья при атаке.',\n    \n    //Type name \n    'type-cosmic-name': 'Космос',\n    'type-tech-name': 'Технологии',\n    'type-mutant-name': 'Мутации',\n    'type-skill-name': 'Способности',\n    'type-science-name': 'Наука',\n    'type-mystic-name': 'Мистика',\n    \n    //Crystal name \n    'crystal-versus-name': 'Кристалл за битвы',\n    'crystal-arena-name': 'Кристалл Арены',\n    'crystal-alliance-name': 'Кристалл союза',\n    'crystal-daily-name': 'Ежедневный кристалл',\n    'crystal-2star-name': 'Кристалл героя с 2-мя звездами',\n    'crystal-premium-name': 'Усиленный кристалл героя',\n    'crystal-3star-name': 'Кристалл героя с 3-мя звездами',\n    'crystal-4star-name': 'Кристалл героя с 4-мя звездами',\n    \n    //Crystal description (keep $CURRENCY$ tokens for image replacement) \n    'crystal-versus-description': 'Даётся за победу на арене 1vs1.',\n    'crystal-arena-description': 'Покупается за 2000 $BATTLECHIPS$.',\n    'crystal-alliance-description': 'Покупается за 1000 $LOYALTY$.',\n    'crystal-daily-description': 'Появляется каждые 24 часа.',\n    'crystal-premium-description': 'Покупается за 100 $UNITS$.',\n    'crystal-3star-description': 'Покупается за 400 $UNITS$, редкая акция.',\n    'crystal-4star-description': 'Покупается за 2500 $UNITS$, очень редкая акция.',\n\n    //Algorithm name\n    'algorithm-greedy-name': 'Greedy',\n    'algorithm-shuffle-name': 'Смешанный',\n\n    //Algorithm description\n    'algorithm-greedy-description': 'МЕДЛЕННЫЙ. Выбирает команды, используя математический просчет на основе введенных апраметров.',\n    'algorithm-shuffle-description': 'БЫСТРЫЙ. Выбирает лучшую возможную комбинацию команды.',\n\n    //Listing words \n    'of': 'из',\n    'with': 'с',\n    'found': 'Найден',\n    'extras': 'Экстра',\n    \n    //Common words/sections \n    'team': 'Команда',\n    'teams': 'Команды',\n    'guide': 'Руководство',\n    'guides': 'Руководства',\n    'champion': 'Чемпион',\n    'champions': 'Чемпионы',\n    'synergy': 'Синергия',\n    'synergies': 'Синергии',\n    'crystal': 'Кристалл',\n    'crystals': 'Кристаллы',\n    'roster': 'Список',\n    \n    //Roster Panel \n    'manage': 'Управление',\n    'add-champion': 'Добавить чемпиона',\n    'import-csv': 'Импорт .csv',\n    'export-csv': 'Экспорт .csv',\n    'delete-all': 'Удалить всех',\n    'sort': 'Сортировать',\n    'filter': 'Фильтр',\n    \n    //Roster Config \n    'stars': 'Категория',\n    'type': 'Класс',\n    'name': 'Имя',\n    \n    'rank': 'Ранг',\n    'level': 'Уровень',\n    'awakened': 'Дубль',\n    'quest': 'Задание',\n    'view-guide': 'Посмотреть руководство',\n    \n    'delete': 'Удалить',\n    'cancel': 'Отмена',\n    \n    'ask-delete': 'Вы уверены, что хотите удалить?',\n    'ask-delete-all': 'Вы уверены, что хотите удалить всех чемпионов?',\n    'cannot-undo': 'Это действие не может быть отменено.',\n    \n    //Team Panel \n    'advanced-settings': 'Дополнительные настройки',\n    'team-size': 'Размер команды',\n    'algorithm': 'Алгоритм',\n    'quest-group': 'Группа задания',\n    'build': 'Построить',\n    \n    //Add Champion Page\n    'add-all': 'Добавить всех',\n   \n    //Advanced Settings Page\n    'reset-defaults': 'Восстановить стандартные настройки',\n    'champion-weights':'Уровни чемпионов',\n    'synergy-weights': 'Уровни синергии',\n    'duplicate-weights': 'Уровни дублей',\n    'choose-preset': 'Выберите предустановку...',\n    'use-levels': 'Просчитать используя звезды / ранги / уровни',\n    \n    //Tuples \n    'double': 'Двойной',\n    'triple': 'Тройной',\n    'quadruple': 'Четверной',\n    'quintuple': 'Пятерной',\n    \n    //Guide Page \n    'choose-guide': 'Выберите руководство',\n    \n    //Options\n    'options': 'Опции',\n    'share-to': 'Поделиться',\n    'facebook': 'Facebook',\n    'twitter': 'Twitter',\n    'google': 'Google',\n    'language': 'Язык',\n    'tools': 'Опции',\n    'synergy-map': 'Карта синергии',\n    'roster-manager': 'Манеджер списка',\n    \n    //Onboarding Messages \n    'onboarding-synergies': 'Используейте меню настройки списка, чтобы добавить еще чемпионов.',\n    'onboarding-roster': 'Откройте настройки, чтобы добавить нового чемпиона',\n    'onboarding-teams': 'Используйте меню строителя, чтобы создать свою команду!',\n    \n    //Guide \n    'coming-soon': 'Скоро обновление...',\n    'gameplay': 'Геймплей',\n    'special': 'Специальные атаки',\n    'signature': 'Коронная способность',\n    'heavy-attack': 'Тяжелая атака',\n    'abilities': 'Способности',\n    \n    'grade': 'Оценка',\n    'strategy': 'Стратегия',\n    \n    'damage-type': 'Тип урона',\n    'range': 'Дальний',\n    'note': 'Заметка',\n    \n    'synergies-external': 'Синергия от других чемпионов',\n    \n    'none': 'Отсутствует',\n};\n// http://collabedit.com/uuf57\n\n\n\n/** WEBPACK FOOTER **\n ** ru.js\n **/","var m = (function app(window, undefined) {\r\n\tvar OBJECT = \"[object Object]\", ARRAY = \"[object Array]\", STRING = \"[object String]\", FUNCTION = \"function\";\r\n\tvar type = {}.toString;\r\n\tvar parser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[.+?\\])/g, attrParser = /\\[(.+?)(?:=(\"|'|)(.*?)\\2)?\\]/;\r\n\tvar voidElements = /^(AREA|BASE|BR|COL|COMMAND|EMBED|HR|IMG|INPUT|KEYGEN|LINK|META|PARAM|SOURCE|TRACK|WBR)$/;\r\n\tvar noop = function() {}\r\n\r\n\t// caching commonly used variables\r\n\tvar $document, $location, $requestAnimationFrame, $cancelAnimationFrame;\r\n\r\n\t// self invoking function needed because of the way mocks work\r\n\tfunction initialize(window){\r\n\t\t$document = window.document;\r\n\t\t$location = window.location;\r\n\t\t$cancelAnimationFrame = window.cancelAnimationFrame || window.clearTimeout;\r\n\t\t$requestAnimationFrame = window.requestAnimationFrame || window.setTimeout;\r\n\t}\r\n\r\n\tinitialize(window);\r\n\r\n\r\n\t/**\r\n\t * @typedef {String} Tag\r\n\t * A string that looks like -> div.classname#id[param=one][param2=two]\r\n\t * Which describes a DOM node\r\n\t */\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Tag} The DOM node tag\r\n\t * @param {Object=[]} optional key-value pairs to be mapped to DOM attrs\r\n\t * @param {...mNode=[]} Zero or more Mithril child nodes. Can be an array, or splat (optional)\r\n\t *\r\n\t */\r\n\tfunction m() {\r\n\t\tvar args = [].slice.call(arguments);\r\n\t\tvar hasAttrs = args[1] != null && type.call(args[1]) === OBJECT && !(\"tag\" in args[1] || \"view\" in args[1]) && !(\"subtree\" in args[1]);\r\n\t\tvar attrs = hasAttrs ? args[1] : {};\r\n\t\tvar classAttrName = \"class\" in attrs ? \"class\" : \"className\";\r\n\t\tvar cell = {tag: \"div\", attrs: {}};\r\n\t\tvar match, classes = [];\r\n\t\tif (type.call(args[0]) != STRING) throw new Error(\"selector in m(selector, attrs, children) should be a string\")\r\n\t\twhile (match = parser.exec(args[0])) {\r\n\t\t\tif (match[1] === \"\" && match[2]) cell.tag = match[2];\r\n\t\t\telse if (match[1] === \"#\") cell.attrs.id = match[2];\r\n\t\t\telse if (match[1] === \".\") classes.push(match[2]);\r\n\t\t\telse if (match[3][0] === \"[\") {\r\n\t\t\t\tvar pair = attrParser.exec(match[3]);\r\n\t\t\t\tcell.attrs[pair[1]] = pair[3] || (pair[2] ? \"\" :true)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar children = hasAttrs ? args.slice(2) : args.slice(1);\r\n\t\tif (children.length === 1 && type.call(children[0]) === ARRAY) {\r\n\t\t\tcell.children = children[0]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcell.children = children\r\n\t\t}\r\n\t\t\r\n\t\tfor (var attrName in attrs) {\r\n\t\t\tif (attrs.hasOwnProperty(attrName)) {\r\n\t\t\t\tif (attrName === classAttrName && attrs[attrName] != null && attrs[attrName] !== \"\") {\r\n\t\t\t\t\tclasses.push(attrs[attrName])\r\n\t\t\t\t\tcell.attrs[attrName] = \"\" //create key in correct iteration order\r\n\t\t\t\t}\r\n\t\t\t\telse cell.attrs[attrName] = attrs[attrName]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (classes.length > 0) cell.attrs[classAttrName] = classes.join(\" \");\r\n\t\t\r\n\t\treturn cell\r\n\t}\r\n\tfunction build(parentElement, parentTag, parentCache, parentIndex, data, cached, shouldReattach, index, editable, namespace, configs) {\r\n\t\t//`build` is a recursive function that manages creation/diffing/removal of DOM elements based on comparison between `data` and `cached`\r\n\t\t//the diff algorithm can be summarized as this:\r\n\t\t//1 - compare `data` and `cached`\r\n\t\t//2 - if they are different, copy `data` to `cached` and update the DOM based on what the difference is\r\n\t\t//3 - recursively apply this algorithm for every array and for the children of every virtual element\r\n\r\n\t\t//the `cached` data structure is essentially the same as the previous redraw's `data` data structure, with a few additions:\r\n\t\t//- `cached` always has a property called `nodes`, which is a list of DOM elements that correspond to the data represented by the respective virtual element\r\n\t\t//- in order to support attaching `nodes` as a property of `cached`, `cached` is *always* a non-primitive object, i.e. if the data was a string, then cached is a String instance. If data was `null` or `undefined`, cached is `new String(\"\")`\r\n\t\t//- `cached also has a `configContext` property, which is the state storage object exposed by config(element, isInitialized, context)\r\n\t\t//- when `cached` is an Object, it represents a virtual element; when it's an Array, it represents a list of elements; when it's a String, Number or Boolean, it represents a text node\r\n\r\n\t\t//`parentElement` is a DOM element used for W3C DOM API calls\r\n\t\t//`parentTag` is only used for handling a corner case for textarea values\r\n\t\t//`parentCache` is used to remove nodes in some multi-node cases\r\n\t\t//`parentIndex` and `index` are used to figure out the offset of nodes. They're artifacts from before arrays started being flattened and are likely refactorable\r\n\t\t//`data` and `cached` are, respectively, the new and old nodes being diffed\r\n\t\t//`shouldReattach` is a flag indicating whether a parent node was recreated (if so, and if this node is reused, then this node must reattach itself to the new parent)\r\n\t\t//`editable` is a flag that indicates whether an ancestor is contenteditable\r\n\t\t//`namespace` indicates the closest HTML namespace as it cascades down from an ancestor\r\n\t\t//`configs` is a list of config functions to run after the topmost `build` call finishes running\r\n\r\n\t\t//there's logic that relies on the assumption that null and undefined data are equivalent to empty strings\r\n\t\t//- this prevents lifecycle surprises from procedural helpers that mix implicit and explicit return statements (e.g. function foo() {if (cond) return m(\"div\")}\r\n\t\t//- it simplifies diffing code\r\n\t\t//data.toString() might throw or return null if data is the return value of Console.log in Firefox (behavior depends on version)\r\n\t\ttry {if (data == null || data.toString() == null) data = \"\";} catch (e) {data = \"\"}\r\n\t\tif (data.subtree === \"retain\") return cached;\r\n\t\tvar cachedType = type.call(cached), dataType = type.call(data);\r\n\t\tif (cached == null || cachedType !== dataType) {\r\n\t\t\tif (cached != null) {\r\n\t\t\t\tif (parentCache && parentCache.nodes) {\r\n\t\t\t\t\tvar offset = index - parentIndex;\r\n\t\t\t\t\tvar end = offset + (dataType === ARRAY ? data : cached.nodes).length;\r\n\t\t\t\t\tclear(parentCache.nodes.slice(offset, end), parentCache.slice(offset, end))\r\n\t\t\t\t}\r\n\t\t\t\telse if (cached.nodes) clear(cached.nodes, cached)\r\n\t\t\t}\r\n\t\t\tcached = new data.constructor;\r\n\t\t\tif (cached.tag) cached = {}; //if constructor creates a virtual dom element, use a blank object as the base cached node instead of copying the virtual el (#277)\r\n\t\t\tcached.nodes = []\r\n\t\t}\r\n\r\n\t\tif (dataType === ARRAY) {\r\n\t\t\t//recursively flatten array\r\n\t\t\tfor (var i = 0, len = data.length; i < len; i++) {\r\n\t\t\t\tif (type.call(data[i]) === ARRAY) {\r\n\t\t\t\t\tdata = data.concat.apply([], data);\r\n\t\t\t\t\ti-- //check current index again and flatten until there are no more nested arrays at that index\r\n\t\t\t\t\tlen = data.length\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar nodes = [], intact = cached.length === data.length, subArrayCount = 0;\r\n\r\n\t\t\t//keys algorithm: sort elements without recreating them if keys are present\r\n\t\t\t//1) create a map of all existing keys, and mark all for deletion\r\n\t\t\t//2) add new keys to map and mark them for addition\r\n\t\t\t//3) if key exists in new list, change action from deletion to a move\r\n\t\t\t//4) for each key, handle its corresponding action as marked in previous steps\r\n\t\t\tvar DELETION = 1, INSERTION = 2 , MOVE = 3;\r\n\t\t\tvar existing = {}, shouldMaintainIdentities = false;\r\n\t\t\tfor (var i = 0; i < cached.length; i++) {\r\n\t\t\t\tif (cached[i] && cached[i].attrs && cached[i].attrs.key != null) {\r\n\t\t\t\t\tshouldMaintainIdentities = true;\r\n\t\t\t\t\texisting[cached[i].attrs.key] = {action: DELETION, index: i}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar guid = 0\r\n\t\t\tfor (var i = 0, len = data.length; i < len; i++) {\r\n\t\t\t\tif (data[i] && data[i].attrs && data[i].attrs.key != null) {\r\n\t\t\t\t\tfor (var j = 0, len = data.length; j < len; j++) {\r\n\t\t\t\t\t\tif (data[j] && data[j].attrs && data[j].attrs.key == null) data[j].attrs.key = \"__mithril__\" + guid++\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (shouldMaintainIdentities) {\r\n\t\t\t\tvar keysDiffer = false\r\n\t\t\t\tif (data.length != cached.length) keysDiffer = true\r\n\t\t\t\telse for (var i = 0, cachedCell, dataCell; cachedCell = cached[i], dataCell = data[i]; i++) {\r\n\t\t\t\t\tif (cachedCell.attrs && dataCell.attrs && cachedCell.attrs.key != dataCell.attrs.key) {\r\n\t\t\t\t\t\tkeysDiffer = true\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (keysDiffer) {\r\n\t\t\t\t\tfor (var i = 0, len = data.length; i < len; i++) {\r\n\t\t\t\t\t\tif (data[i] && data[i].attrs) {\r\n\t\t\t\t\t\t\tif (data[i].attrs.key != null) {\r\n\t\t\t\t\t\t\t\tvar key = data[i].attrs.key;\r\n\t\t\t\t\t\t\t\tif (!existing[key]) existing[key] = {action: INSERTION, index: i};\r\n\t\t\t\t\t\t\t\telse existing[key] = {\r\n\t\t\t\t\t\t\t\t\taction: MOVE,\r\n\t\t\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\t\t\tfrom: existing[key].index,\r\n\t\t\t\t\t\t\t\t\telement: cached.nodes[existing[key].index] || $document.createElement(\"div\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar actions = []\r\n\t\t\t\t\tfor (var prop in existing) actions.push(existing[prop])\r\n\t\t\t\t\tvar changes = actions.sort(sortChanges);\r\n\t\t\t\t\tvar newCached = new Array(cached.length)\r\n\t\t\t\t\tnewCached.nodes = cached.nodes.slice()\r\n\r\n\t\t\t\t\tfor (var i = 0, change; change = changes[i]; i++) {\r\n\t\t\t\t\t\tif (change.action === DELETION) {\r\n\t\t\t\t\t\t\tclear(cached[change.index].nodes, cached[change.index]);\r\n\t\t\t\t\t\t\tnewCached.splice(change.index, 1)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (change.action === INSERTION) {\r\n\t\t\t\t\t\t\tvar dummy = $document.createElement(\"div\");\r\n\t\t\t\t\t\t\tdummy.key = data[change.index].attrs.key;\r\n\t\t\t\t\t\t\tparentElement.insertBefore(dummy, parentElement.childNodes[change.index] || null);\r\n\t\t\t\t\t\t\tnewCached.splice(change.index, 0, {attrs: {key: data[change.index].attrs.key}, nodes: [dummy]})\r\n\t\t\t\t\t\t\tnewCached.nodes[change.index] = dummy\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (change.action === MOVE) {\r\n\t\t\t\t\t\t\tif (parentElement.childNodes[change.index] !== change.element && change.element !== null) {\r\n\t\t\t\t\t\t\t\tparentElement.insertBefore(change.element, parentElement.childNodes[change.index] || null)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnewCached[change.index] = cached[change.from]\r\n\t\t\t\t\t\t\tnewCached.nodes[change.index] = change.element\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcached = newCached;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//end key algorithm\r\n\r\n\t\t\tfor (var i = 0, cacheCount = 0, len = data.length; i < len; i++) {\r\n\t\t\t\t//diff each item in the array\r\n\t\t\t\tvar item = build(parentElement, parentTag, cached, index, data[i], cached[cacheCount], shouldReattach, index + subArrayCount || subArrayCount, editable, namespace, configs);\r\n\t\t\t\tif (item === undefined) continue;\r\n\t\t\t\tif (!item.nodes.intact) intact = false;\r\n\t\t\t\tif (item.$trusted) {\r\n\t\t\t\t\t//fix offset of next element if item was a trusted string w/ more than one html element\r\n\t\t\t\t\t//the first clause in the regexp matches elements\r\n\t\t\t\t\t//the second clause (after the pipe) matches text nodes\r\n\t\t\t\t\tsubArrayCount += (item.match(/<[^\\/]|\\>\\s*[^<]/g) || [0]).length\r\n\t\t\t\t}\r\n\t\t\t\telse subArrayCount += type.call(item) === ARRAY ? item.length : 1;\r\n\t\t\t\tcached[cacheCount++] = item\r\n\t\t\t}\r\n\t\t\tif (!intact) {\r\n\t\t\t\t//diff the array itself\r\n\t\t\t\t\r\n\t\t\t\t//update the list of DOM nodes by collecting the nodes from each item\r\n\t\t\t\tfor (var i = 0, len = data.length; i < len; i++) {\r\n\t\t\t\t\tif (cached[i] != null) nodes.push.apply(nodes, cached[i].nodes)\r\n\t\t\t\t}\r\n\t\t\t\t//remove items from the end of the array if the new array is shorter than the old one\r\n\t\t\t\t//if errors ever happen here, the issue is most likely a bug in the construction of the `cached` data structure somewhere earlier in the program\r\n\t\t\t\tfor (var i = 0, node; node = cached.nodes[i]; i++) {\r\n\t\t\t\t\tif (node.parentNode != null && nodes.indexOf(node) < 0) clear([node], [cached[i]])\r\n\t\t\t\t}\r\n\t\t\t\tif (data.length < cached.length) cached.length = data.length;\r\n\t\t\t\tcached.nodes = nodes\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (data != null && dataType === OBJECT) {\r\n\t\t\tvar views = [], controllers = []\r\n\t\t\twhile (data.view) {\r\n\t\t\t\tvar view = data.view.$original || data.view\r\n\t\t\t\tvar controllerIndex = m.redraw.strategy() == \"diff\" && cached.views ? cached.views.indexOf(view) : -1\r\n\t\t\t\tvar controller = controllerIndex > -1 ? cached.controllers[controllerIndex] : new (data.controller || noop)\r\n\t\t\t\tvar key = data && data.attrs && data.attrs.key\r\n\t\t\t\tdata = pendingRequests == 0 || (cached && cached.controllers && cached.controllers.indexOf(controller) > -1) ? data.view(controller) : {tag: \"placeholder\"}\r\n\t\t\t\tif (data.subtree === \"retain\") return cached;\r\n\t\t\t\tif (key) {\r\n\t\t\t\t\tif (!data.attrs) data.attrs = {}\r\n\t\t\t\t\tdata.attrs.key = key\r\n\t\t\t\t}\r\n\t\t\t\tif (controller.onunload) unloaders.push({controller: controller, handler: controller.onunload})\r\n\t\t\t\tviews.push(view)\r\n\t\t\t\tcontrollers.push(controller)\r\n\t\t\t}\r\n\t\t\tif (!data.tag && controllers.length) throw new Error(\"Component template must return a virtual element, not an array, string, etc.\")\r\n\t\t\tif (!data.attrs) data.attrs = {};\r\n\t\t\tif (!cached.attrs) cached.attrs = {};\r\n\r\n\t\t\tvar dataAttrKeys = Object.keys(data.attrs)\r\n\t\t\tvar hasKeys = dataAttrKeys.length > (\"key\" in data.attrs ? 1 : 0)\r\n\t\t\t//if an element is different enough from the one in cache, recreate it\r\n\t\t\tif (data.tag != cached.tag || dataAttrKeys.sort().join() != Object.keys(cached.attrs).sort().join() || data.attrs.id != cached.attrs.id || data.attrs.key != cached.attrs.key || (m.redraw.strategy() == \"all\" && (!cached.configContext || cached.configContext.retain !== true)) || (m.redraw.strategy() == \"diff\" && cached.configContext && cached.configContext.retain === false)) {\r\n\t\t\t\tif (cached.nodes.length) clear(cached.nodes);\r\n\t\t\t\tif (cached.configContext && typeof cached.configContext.onunload === FUNCTION) cached.configContext.onunload()\r\n\t\t\t\tif (cached.controllers) {\r\n\t\t\t\t\tfor (var i = 0, controller; controller = cached.controllers[i]; i++) {\r\n\t\t\t\t\t\tif (typeof controller.onunload === FUNCTION) controller.onunload({preventDefault: noop})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (type.call(data.tag) != STRING) return;\r\n\r\n\t\t\tvar node, isNew = cached.nodes.length === 0;\r\n\t\t\tif (data.attrs.xmlns) namespace = data.attrs.xmlns;\r\n\t\t\telse if (data.tag === \"svg\") namespace = \"http://www.w3.org/2000/svg\";\r\n\t\t\telse if (data.tag === \"math\") namespace = \"http://www.w3.org/1998/Math/MathML\";\r\n\t\t\t\r\n\t\t\tif (isNew) {\r\n\t\t\t\tif (data.attrs.is) node = namespace === undefined ? $document.createElement(data.tag, data.attrs.is) : $document.createElementNS(namespace, data.tag, data.attrs.is);\r\n\t\t\t\telse node = namespace === undefined ? $document.createElement(data.tag) : $document.createElementNS(namespace, data.tag);\r\n\t\t\t\tcached = {\r\n\t\t\t\t\ttag: data.tag,\r\n\t\t\t\t\t//set attributes first, then create children\r\n\t\t\t\t\tattrs: hasKeys ? setAttributes(node, data.tag, data.attrs, {}, namespace) : data.attrs,\r\n\t\t\t\t\tchildren: data.children != null && data.children.length > 0 ?\r\n\t\t\t\t\t\tbuild(node, data.tag, undefined, undefined, data.children, cached.children, true, 0, data.attrs.contenteditable ? node : editable, namespace, configs) :\r\n\t\t\t\t\t\tdata.children,\r\n\t\t\t\t\tnodes: [node]\r\n\t\t\t\t};\r\n\t\t\t\tif (controllers.length) {\r\n\t\t\t\t\tcached.views = views\r\n\t\t\t\t\tcached.controllers = controllers\r\n\t\t\t\t\tfor (var i = 0, controller; controller = controllers[i]; i++) {\r\n\t\t\t\t\t\tif (controller.onunload && controller.onunload.$old) controller.onunload = controller.onunload.$old\r\n\t\t\t\t\t\tif (pendingRequests && controller.onunload) {\r\n\t\t\t\t\t\t\tvar onunload = controller.onunload\r\n\t\t\t\t\t\t\tcontroller.onunload = noop\r\n\t\t\t\t\t\t\tcontroller.onunload.$old = onunload\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (cached.children && !cached.children.nodes) cached.children.nodes = [];\r\n\t\t\t\t//edge case: setting value on <select> doesn't work before children exist, so set it again after children have been created\r\n\t\t\t\tif (data.tag === \"select\" && \"value\" in data.attrs) setAttributes(node, data.tag, {value: data.attrs.value}, {}, namespace);\r\n\t\t\t\tparentElement.insertBefore(node, parentElement.childNodes[index] || null)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode = cached.nodes[0];\r\n\t\t\t\tif (hasKeys) setAttributes(node, data.tag, data.attrs, cached.attrs, namespace);\r\n\t\t\t\tcached.children = build(node, data.tag, undefined, undefined, data.children, cached.children, false, 0, data.attrs.contenteditable ? node : editable, namespace, configs);\r\n\t\t\t\tcached.nodes.intact = true;\r\n\t\t\t\tif (controllers.length) {\r\n\t\t\t\t\tcached.views = views\r\n\t\t\t\t\tcached.controllers = controllers\r\n\t\t\t\t}\r\n\t\t\t\tif (shouldReattach === true && node != null) parentElement.insertBefore(node, parentElement.childNodes[index] || null)\r\n\t\t\t}\r\n\t\t\t//schedule configs to be called. They are called after `build` finishes running\r\n\t\t\tif (typeof data.attrs[\"config\"] === FUNCTION) {\r\n\t\t\t\tvar context = cached.configContext = cached.configContext || {};\r\n\r\n\t\t\t\t// bind\r\n\t\t\t\tvar callback = function(data, args) {\r\n\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\treturn data.attrs[\"config\"].apply(data, args)\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tconfigs.push(callback(data, [node, !isNew, context, cached]))\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (typeof data != FUNCTION) {\r\n\t\t\t//handle text nodes\r\n\t\t\tvar nodes;\r\n\t\t\tif (cached.nodes.length === 0) {\r\n\t\t\t\tif (data.$trusted) {\r\n\t\t\t\t\tnodes = injectHTML(parentElement, index, data)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnodes = [$document.createTextNode(data)];\r\n\t\t\t\t\tif (!parentElement.nodeName.match(voidElements)) parentElement.insertBefore(nodes[0], parentElement.childNodes[index] || null)\r\n\t\t\t\t}\r\n\t\t\t\tcached = \"string number boolean\".indexOf(typeof data) > -1 ? new data.constructor(data) : data;\r\n\t\t\t\tcached.nodes = nodes\r\n\t\t\t}\r\n\t\t\telse if (cached.valueOf() !== data.valueOf() || shouldReattach === true) {\r\n\t\t\t\tnodes = cached.nodes;\r\n\t\t\t\tif (!editable || editable !== $document.activeElement) {\r\n\t\t\t\t\tif (data.$trusted) {\r\n\t\t\t\t\t\tclear(nodes, cached);\r\n\t\t\t\t\t\tnodes = injectHTML(parentElement, index, data)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//corner case: replacing the nodeValue of a text node that is a child of a textarea/contenteditable doesn't work\r\n\t\t\t\t\t\t//we need to update the value property of the parent textarea or the innerHTML of the contenteditable element instead\r\n\t\t\t\t\t\tif (parentTag === \"textarea\") parentElement.value = data;\r\n\t\t\t\t\t\telse if (editable) editable.innerHTML = data;\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (nodes[0].nodeType === 1 || nodes.length > 1) { //was a trusted string\r\n\t\t\t\t\t\t\t\tclear(cached.nodes, cached);\r\n\t\t\t\t\t\t\t\tnodes = [$document.createTextNode(data)]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tparentElement.insertBefore(nodes[0], parentElement.childNodes[index] || null);\r\n\t\t\t\t\t\t\tnodes[0].nodeValue = data\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcached = new data.constructor(data);\r\n\t\t\t\tcached.nodes = nodes\r\n\t\t\t}\r\n\t\t\telse cached.nodes.intact = true\r\n\t\t}\r\n\r\n\t\treturn cached\r\n\t}\r\n\tfunction sortChanges(a, b) {return a.action - b.action || a.index - b.index}\r\n\tfunction setAttributes(node, tag, dataAttrs, cachedAttrs, namespace) {\r\n\t\tfor (var attrName in dataAttrs) {\r\n\t\t\tvar dataAttr = dataAttrs[attrName];\r\n\t\t\tvar cachedAttr = cachedAttrs[attrName];\r\n\t\t\tif (!(attrName in cachedAttrs) || (cachedAttr !== dataAttr)) {\r\n\t\t\t\tcachedAttrs[attrName] = dataAttr;\r\n\t\t\t\ttry {\r\n\t\t\t\t\t//`config` isn't a real attributes, so ignore it\r\n\t\t\t\t\tif (attrName === \"config\" || attrName == \"key\") continue;\r\n\t\t\t\t\t//hook event handlers to the auto-redrawing system\r\n\t\t\t\t\telse if (typeof dataAttr === FUNCTION && attrName.indexOf(\"on\") === 0) {\r\n\t\t\t\t\t\tnode[attrName] = autoredraw(dataAttr, node)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//handle `style: {...}`\r\n\t\t\t\t\telse if (attrName === \"style\" && dataAttr != null && type.call(dataAttr) === OBJECT) {\r\n\t\t\t\t\t\tfor (var rule in dataAttr) {\r\n\t\t\t\t\t\t\tif (cachedAttr == null || cachedAttr[rule] !== dataAttr[rule]) node.style[rule] = dataAttr[rule]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (var rule in cachedAttr) {\r\n\t\t\t\t\t\t\tif (!(rule in dataAttr)) node.style[rule] = \"\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//handle SVG\r\n\t\t\t\t\telse if (namespace != null) {\r\n\t\t\t\t\t\tif (attrName === \"href\") node.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", dataAttr);\r\n\t\t\t\t\t\telse if (attrName === \"className\") node.setAttribute(\"class\", dataAttr);\r\n\t\t\t\t\t\telse node.setAttribute(attrName, dataAttr)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//handle cases that are properties (but ignore cases where we should use setAttribute instead)\r\n\t\t\t\t\t//- list and form are typically used as strings, but are DOM element references in js\r\n\t\t\t\t\t//- when using CSS selectors (e.g. `m(\"[style='']\")`), style is used as a string, but it's an object in js\r\n\t\t\t\t\telse if (attrName in node && !(attrName === \"list\" || attrName === \"style\" || attrName === \"form\" || attrName === \"type\" || attrName === \"width\" || attrName === \"height\")) {\r\n\t\t\t\t\t\t//#348 don't set the value if not needed otherwise cursor placement breaks in Chrome\r\n\t\t\t\t\t\tif (tag !== \"input\" || node[attrName] !== dataAttr) node[attrName] = dataAttr\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse node.setAttribute(attrName, dataAttr)\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t//swallow IE's invalid argument errors to mimic HTML's fallback-to-doing-nothing-on-invalid-attributes behavior\r\n\t\t\t\t\tif (e.message.indexOf(\"Invalid argument\") < 0) throw e\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//#348 dataAttr may not be a string, so use loose comparison (double equal) instead of strict (triple equal)\r\n\t\t\telse if (attrName === \"value\" && tag === \"input\" && node.value != dataAttr) {\r\n\t\t\t\tnode.value = dataAttr\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cachedAttrs\r\n\t}\r\n\tfunction clear(nodes, cached) {\r\n\t\tfor (var i = nodes.length - 1; i > -1; i--) {\r\n\t\t\tif (nodes[i] && nodes[i].parentNode) {\r\n\t\t\t\ttry {nodes[i].parentNode.removeChild(nodes[i])}\r\n\t\t\t\tcatch (e) {} //ignore if this fails due to order of events (see http://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node)\r\n\t\t\t\tcached = [].concat(cached);\r\n\t\t\t\tif (cached[i]) unload(cached[i])\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (nodes.length != 0) nodes.length = 0\r\n\t}\r\n\tfunction unload(cached) {\r\n\t\tif (cached.configContext && typeof cached.configContext.onunload === FUNCTION) {\r\n\t\t\tcached.configContext.onunload();\r\n\t\t\tcached.configContext.onunload = null\r\n\t\t}\r\n\t\tif (cached.controllers) {\r\n\t\t\tfor (var i = 0, controller; controller = cached.controllers[i]; i++) {\r\n\t\t\t\tif (typeof controller.onunload === FUNCTION) controller.onunload({preventDefault: noop});\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cached.children) {\r\n\t\t\tif (type.call(cached.children) === ARRAY) {\r\n\t\t\t\tfor (var i = 0, child; child = cached.children[i]; i++) unload(child)\r\n\t\t\t}\r\n\t\t\telse if (cached.children.tag) unload(cached.children)\r\n\t\t}\r\n\t}\r\n\tfunction injectHTML(parentElement, index, data) {\r\n\t\tvar nextSibling = parentElement.childNodes[index];\r\n\t\tif (nextSibling) {\r\n\t\t\tvar isElement = nextSibling.nodeType != 1;\r\n\t\t\tvar placeholder = $document.createElement(\"span\");\r\n\t\t\tif (isElement) {\r\n\t\t\t\tparentElement.insertBefore(placeholder, nextSibling || null);\r\n\t\t\t\tplaceholder.insertAdjacentHTML(\"beforebegin\", data);\r\n\t\t\t\tparentElement.removeChild(placeholder)\r\n\t\t\t}\r\n\t\t\telse nextSibling.insertAdjacentHTML(\"beforebegin\", data)\r\n\t\t}\r\n\t\telse parentElement.insertAdjacentHTML(\"beforeend\", data);\r\n\t\tvar nodes = [];\r\n\t\twhile (parentElement.childNodes[index] !== nextSibling) {\r\n\t\t\tnodes.push(parentElement.childNodes[index]);\r\n\t\t\tindex++\r\n\t\t}\r\n\t\treturn nodes\r\n\t}\r\n\tfunction autoredraw(callback, object) {\r\n\t\treturn function(e) {\r\n\t\t\te = e || event;\r\n\t\t\tm.redraw.strategy(\"diff\");\r\n\t\t\tm.startComputation();\r\n\t\t\ttry {return callback.call(object, e)}\r\n\t\t\tfinally {\r\n\t\t\t\tendFirstComputation()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar html;\r\n\tvar documentNode = {\r\n\t\tappendChild: function(node) {\r\n\t\t\tif (html === undefined) html = $document.createElement(\"html\");\r\n\t\t\tif ($document.documentElement && $document.documentElement !== node) {\r\n\t\t\t\t$document.replaceChild(node, $document.documentElement)\r\n\t\t\t}\r\n\t\t\telse $document.appendChild(node);\r\n\t\t\tthis.childNodes = $document.childNodes\r\n\t\t},\r\n\t\tinsertBefore: function(node) {\r\n\t\t\tthis.appendChild(node)\r\n\t\t},\r\n\t\tchildNodes: []\r\n\t};\r\n\tvar nodeCache = [], cellCache = {};\r\n\tm.render = function(root, cell, forceRecreation) {\r\n\t\tvar configs = [];\r\n\t\tif (!root) throw new Error(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\");\r\n\t\tvar id = getCellCacheKey(root);\r\n\t\tvar isDocumentRoot = root === $document;\r\n\t\tvar node = isDocumentRoot || root === $document.documentElement ? documentNode : root;\r\n\t\tif (isDocumentRoot && cell.tag != \"html\") cell = {tag: \"html\", attrs: {}, children: cell};\r\n\t\tif (cellCache[id] === undefined) clear(node.childNodes);\r\n\t\tif (forceRecreation === true) reset(root);\r\n\t\tcellCache[id] = build(node, null, undefined, undefined, cell, cellCache[id], false, 0, null, undefined, configs);\r\n\t\tfor (var i = 0, len = configs.length; i < len; i++) configs[i]()\r\n\t};\r\n\tfunction getCellCacheKey(element) {\r\n\t\tvar index = nodeCache.indexOf(element);\r\n\t\treturn index < 0 ? nodeCache.push(element) - 1 : index\r\n\t}\r\n\r\n\tm.trust = function(value) {\r\n\t\tvalue = new String(value);\r\n\t\tvalue.$trusted = true;\r\n\t\treturn value\r\n\t};\r\n\r\n\tfunction gettersetter(store) {\r\n\t\tvar prop = function() {\r\n\t\t\tif (arguments.length) store = arguments[0];\r\n\t\t\treturn store\r\n\t\t};\r\n\r\n\t\tprop.toJSON = function() {\r\n\t\t\treturn store\r\n\t\t};\r\n\r\n\t\treturn prop\r\n\t}\r\n\r\n\tm.prop = function (store) {\r\n\t\t//note: using non-strict equality check here because we're checking if store is null OR undefined\r\n\t\tif (((store != null && type.call(store) === OBJECT) || typeof store === FUNCTION) && typeof store.then === FUNCTION) {\r\n\t\t\treturn propify(store)\r\n\t\t}\r\n\r\n\t\treturn gettersetter(store)\r\n\t};\r\n\r\n\tvar roots = [], components = [], controllers = [], lastRedrawId = null, lastRedrawCallTime = 0, computePreRedrawHook = null, computePostRedrawHook = null, prevented = false, topComponent, unloaders = [];\r\n\tvar FRAME_BUDGET = 16; //60 frames per second = 1 call per 16 ms\r\n\tfunction parameterize(component, args) {\r\n\t\tvar controller = function() {\r\n\t\t\treturn (component.controller || noop).apply(this, args) || this\r\n\t\t}\r\n\t\tvar view = function(ctrl) {\r\n\t\t\tif (arguments.length > 1) args = args.concat([].slice.call(arguments, 1))\r\n\t\t\treturn component.view.apply(component, args ? [ctrl].concat(args) : [ctrl])\r\n\t\t}\r\n\t\tview.$original = component.view\r\n\t\tvar output = {controller: controller, view: view}\r\n\t\tif (args[0] && args[0].key != null) output.attrs = {key: args[0].key}\r\n\t\treturn output\r\n\t}\r\n\tm.component = function(component) {\r\n\t\treturn parameterize(component, [].slice.call(arguments, 1))\r\n\t}\r\n\tm.mount = m.module = function(root, component) {\r\n\t\tif (!root) throw new Error(\"Please ensure the DOM element exists before rendering a template into it.\");\r\n\t\tvar index = roots.indexOf(root);\r\n\t\tif (index < 0) index = roots.length;\r\n\t\t\r\n\t\tvar isPrevented = false;\r\n\t\tvar event = {preventDefault: function() {\r\n\t\t\tisPrevented = true;\r\n\t\t\tcomputePreRedrawHook = computePostRedrawHook = null;\r\n\t\t}};\r\n\t\tfor (var i = 0, unloader; unloader = unloaders[i]; i++) {\r\n\t\t\tunloader.handler.call(unloader.controller, event)\r\n\t\t\tunloader.controller.onunload = null\r\n\t\t}\r\n\t\tif (isPrevented) {\r\n\t\t\tfor (var i = 0, unloader; unloader = unloaders[i]; i++) unloader.controller.onunload = unloader.handler\r\n\t\t}\r\n\t\telse unloaders = []\r\n\t\t\r\n\t\tif (controllers[index] && typeof controllers[index].onunload === FUNCTION) {\r\n\t\t\tcontrollers[index].onunload(event)\r\n\t\t}\r\n\t\t\r\n\t\tif (!isPrevented) {\r\n\t\t\tm.redraw.strategy(\"all\");\r\n\t\t\tm.startComputation();\r\n\t\t\troots[index] = root;\r\n\t\t\tif (arguments.length > 2) component = subcomponent(component, [].slice.call(arguments, 2))\r\n\t\t\tvar currentComponent = topComponent = component = component || {controller: function() {}};\r\n\t\t\tvar constructor = component.controller || noop\r\n\t\t\tvar controller = new constructor;\r\n\t\t\t//controllers may call m.mount recursively (via m.route redirects, for example)\r\n\t\t\t//this conditional ensures only the last recursive m.mount call is applied\r\n\t\t\tif (currentComponent === topComponent) {\r\n\t\t\t\tcontrollers[index] = controller;\r\n\t\t\t\tcomponents[index] = component\r\n\t\t\t}\r\n\t\t\tendFirstComputation();\r\n\t\t\treturn controllers[index]\r\n\t\t}\r\n\t};\r\n\tvar redrawing = false\r\n\tm.redraw = function(force) {\r\n\t\tif (redrawing) return\r\n\t\tredrawing = true\r\n\t\t//lastRedrawId is a positive number if a second redraw is requested before the next animation frame\r\n\t\t//lastRedrawID is null if it's the first redraw and not an event handler\r\n\t\tif (lastRedrawId && force !== true) {\r\n\t\t\t//when setTimeout: only reschedule redraw if time between now and previous redraw is bigger than a frame, otherwise keep currently scheduled timeout\r\n\t\t\t//when rAF: always reschedule redraw\r\n\t\t\tif ($requestAnimationFrame === window.requestAnimationFrame || new Date - lastRedrawCallTime > FRAME_BUDGET) {\r\n\t\t\t\tif (lastRedrawId > 0) $cancelAnimationFrame(lastRedrawId);\r\n\t\t\t\tlastRedrawId = $requestAnimationFrame(redraw, FRAME_BUDGET)\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tredraw();\r\n\t\t\tlastRedrawId = $requestAnimationFrame(function() {lastRedrawId = null}, FRAME_BUDGET)\r\n\t\t}\r\n\t\tredrawing = false\r\n\t};\r\n\tm.redraw.strategy = m.prop();\r\n\tfunction redraw() {\r\n\t\tif (computePreRedrawHook) {\r\n\t\t\tcomputePreRedrawHook()\r\n\t\t\tcomputePreRedrawHook = null\r\n\t\t}\r\n\t\tfor (var i = 0, root; root = roots[i]; i++) {\r\n\t\t\tif (controllers[i]) {\r\n\t\t\t\tvar args = components[i].controller && components[i].controller.$$args ? [controllers[i]].concat(components[i].controller.$$args) : [controllers[i]]\r\n\t\t\t\tm.render(root, components[i].view ? components[i].view(controllers[i], args) : \"\")\r\n\t\t\t}\r\n\t\t}\r\n\t\t//after rendering within a routed context, we need to scroll back to the top, and fetch the document title for history.pushState\r\n\t\tif (computePostRedrawHook) {\r\n\t\t\tcomputePostRedrawHook();\r\n\t\t\tcomputePostRedrawHook = null\r\n\t\t}\r\n\t\tlastRedrawId = null;\r\n\t\tlastRedrawCallTime = new Date;\r\n\t\tm.redraw.strategy(\"diff\")\r\n\t}\r\n\r\n\tvar pendingRequests = 0;\r\n\tm.startComputation = function() {pendingRequests++};\r\n\tm.endComputation = function() {\r\n\t\tpendingRequests = Math.max(pendingRequests - 1, 0);\r\n\t\tif (pendingRequests === 0) m.redraw()\r\n\t};\r\n\tvar endFirstComputation = function() {\r\n\t\tif (m.redraw.strategy() == \"none\") {\r\n\t\t\tpendingRequests--\r\n\t\t\tm.redraw.strategy(\"diff\")\r\n\t\t}\r\n\t\telse m.endComputation();\r\n\t}\r\n\r\n\tm.withAttr = function(prop, withAttrCallback) {\r\n\t\treturn function(e) {\r\n\t\t\te = e || event;\r\n\t\t\tvar currentTarget = e.currentTarget || this;\r\n\t\t\twithAttrCallback(prop in currentTarget ? currentTarget[prop] : currentTarget.getAttribute(prop))\r\n\t\t}\r\n\t};\r\n\r\n\t//routing\r\n\tvar modes = {pathname: \"\", hash: \"#\", search: \"?\"};\r\n\tvar redirect = noop, routeParams, currentRoute, isDefaultRoute = false;\r\n\tm.route = function() {\r\n\t\t//m.route()\r\n\t\tif (arguments.length === 0) return currentRoute;\r\n\t\t//m.route(el, defaultRoute, routes)\r\n\t\telse if (arguments.length === 3 && type.call(arguments[1]) === STRING) {\r\n\t\t\tvar root = arguments[0], defaultRoute = arguments[1], router = arguments[2];\r\n\t\t\tredirect = function(source) {\r\n\t\t\t\tvar path = currentRoute = normalizeRoute(source);\r\n\t\t\t\tif (!routeByValue(root, router, path)) {\r\n\t\t\t\t\tif (isDefaultRoute) throw new Error(\"Ensure the default route matches one of the routes defined in m.route\")\r\n\t\t\t\t\tisDefaultRoute = true\r\n\t\t\t\t\tm.route(defaultRoute, true)\r\n\t\t\t\t\tisDefaultRoute = false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tvar listener = m.route.mode === \"hash\" ? \"onhashchange\" : \"onpopstate\";\r\n\t\t\twindow[listener] = function() {\r\n\t\t\t\tvar path = $location[m.route.mode]\r\n\t\t\t\tif (m.route.mode === \"pathname\") path += $location.search\r\n\t\t\t\tif (currentRoute != normalizeRoute(path)) {\r\n\t\t\t\t\tredirect(path)\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tcomputePreRedrawHook = setScroll;\r\n\t\t\twindow[listener]()\r\n\t\t}\r\n\t\t//config: m.route\r\n\t\telse if (arguments[0].addEventListener || arguments[0].attachEvent) {\r\n\t\t\tvar element = arguments[0];\r\n\t\t\tvar isInitialized = arguments[1];\r\n\t\t\tvar context = arguments[2];\r\n\t\t\tvar vdom = arguments[3];\r\n\t\t\telement.href = (m.route.mode !== 'pathname' ? $location.pathname : '') + modes[m.route.mode] + vdom.attrs.href;\r\n\t\t\tif (element.addEventListener) {\r\n\t\t\t\telement.removeEventListener(\"click\", routeUnobtrusive);\r\n\t\t\t\telement.addEventListener(\"click\", routeUnobtrusive)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telement.detachEvent(\"onclick\", routeUnobtrusive);\r\n\t\t\t\telement.attachEvent(\"onclick\", routeUnobtrusive)\r\n\t\t\t}\r\n\t\t}\r\n\t\t//m.route(route, params, shouldReplaceHistoryEntry)\r\n\t\telse if (type.call(arguments[0]) === STRING) {\r\n\t\t\tvar oldRoute = currentRoute;\r\n\t\t\tcurrentRoute = arguments[0];\r\n\t\t\tvar args = arguments[1] || {}\r\n\t\t\tvar queryIndex = currentRoute.indexOf(\"?\")\r\n\t\t\tvar params = queryIndex > -1 ? parseQueryString(currentRoute.slice(queryIndex + 1)) : {}\r\n\t\t\tfor (var i in args) params[i] = args[i]\r\n\t\t\tvar querystring = buildQueryString(params)\r\n\t\t\tvar currentPath = queryIndex > -1 ? currentRoute.slice(0, queryIndex) : currentRoute\r\n\t\t\tif (querystring) currentRoute = currentPath + (currentPath.indexOf(\"?\") === -1 ? \"?\" : \"&\") + querystring;\r\n\r\n\t\t\tvar shouldReplaceHistoryEntry = (arguments.length === 3 ? arguments[2] : arguments[1]) === true || oldRoute === arguments[0];\r\n\r\n\t\t\tif (window.history.pushState) {\r\n\t\t\t\tcomputePreRedrawHook = setScroll\r\n\t\t\t\tcomputePostRedrawHook = function() {\r\n\t\t\t\t\twindow.history[shouldReplaceHistoryEntry ? \"replaceState\" : \"pushState\"](null, $document.title, modes[m.route.mode] + currentRoute);\r\n\t\t\t\t};\r\n\t\t\t\tredirect(modes[m.route.mode] + currentRoute)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$location[m.route.mode] = currentRoute\r\n\t\t\t\tredirect(modes[m.route.mode] + currentRoute)\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tm.route.param = function(key) {\r\n\t\tif (!routeParams) throw new Error(\"You must call m.route(element, defaultRoute, routes) before calling m.route.param()\")\r\n\t\treturn routeParams[key]\r\n\t};\r\n\tm.route.mode = \"search\";\r\n\tfunction normalizeRoute(route) {\r\n\t\treturn route.slice(modes[m.route.mode].length)\r\n\t}\r\n\tfunction routeByValue(root, router, path) {\r\n\t\trouteParams = {};\r\n\r\n\t\tvar queryStart = path.indexOf(\"?\");\r\n\t\tif (queryStart !== -1) {\r\n\t\t\trouteParams = parseQueryString(path.substr(queryStart + 1, path.length));\r\n\t\t\tpath = path.substr(0, queryStart)\r\n\t\t}\r\n\r\n\t\t// Get all routes and check if there's\r\n\t\t// an exact match for the current path\r\n\t\tvar keys = Object.keys(router);\r\n\t\tvar index = keys.indexOf(path);\r\n\t\tif(index !== -1){\r\n\t\t\tm.mount(root, router[keys [index]]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfor (var route in router) {\r\n\t\t\tif (route === path) {\r\n\t\t\t\tm.mount(root, router[route]);\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tvar matcher = new RegExp(\"^\" + route.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\").replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\");\r\n\r\n\t\t\tif (matcher.test(path)) {\r\n\t\t\t\tpath.replace(matcher, function() {\r\n\t\t\t\t\tvar keys = route.match(/:[^\\/]+/g) || [];\r\n\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2);\r\n\t\t\t\t\tfor (var i = 0, len = keys.length; i < len; i++) routeParams[keys[i].replace(/:|\\./g, \"\")] = decodeURIComponent(values[i])\r\n\t\t\t\t\tm.mount(root, router[route])\r\n\t\t\t\t});\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction routeUnobtrusive(e) {\r\n\t\te = e || event;\r\n\t\tif (e.ctrlKey || e.metaKey || e.which === 2) return;\r\n\t\tif (e.preventDefault) e.preventDefault();\r\n\t\telse e.returnValue = false;\r\n\t\tvar currentTarget = e.currentTarget || e.srcElement;\r\n\t\tvar args = m.route.mode === \"pathname\" && currentTarget.search ? parseQueryString(currentTarget.search.slice(1)) : {};\r\n\t\twhile (currentTarget && currentTarget.nodeName.toUpperCase() != \"A\") currentTarget = currentTarget.parentNode\r\n\t\tm.route(currentTarget[m.route.mode].slice(modes[m.route.mode].length), args)\r\n\t}\r\n\tfunction setScroll() {\r\n\t\tif (m.route.mode != \"hash\" && $location.hash) $location.hash = $location.hash;\r\n\t\telse window.scrollTo(0, 0)\r\n\t}\r\n\tfunction buildQueryString(object, prefix) {\r\n\t\tvar duplicates = {}\r\n\t\tvar str = []\r\n\t\tfor (var prop in object) {\r\n\t\t\tvar key = prefix ? prefix + \"[\" + prop + \"]\" : prop\r\n\t\t\tvar value = object[prop]\r\n\t\t\tvar valueType = type.call(value)\r\n\t\t\tvar pair = (value === null) ? encodeURIComponent(key) :\r\n\t\t\t\tvalueType === OBJECT ? buildQueryString(value, key) :\r\n\t\t\t\tvalueType === ARRAY ? value.reduce(function(memo, item) {\r\n\t\t\t\t\tif (!duplicates[key]) duplicates[key] = {}\r\n\t\t\t\t\tif (!duplicates[key][item]) {\r\n\t\t\t\t\t\tduplicates[key][item] = true\r\n\t\t\t\t\t\treturn memo.concat(encodeURIComponent(key) + \"=\" + encodeURIComponent(item))\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn memo\r\n\t\t\t\t}, []).join(\"&\") :\r\n\t\t\t\tencodeURIComponent(key) + \"=\" + encodeURIComponent(value)\r\n\t\t\tif (value !== undefined) str.push(pair)\r\n\t\t}\r\n\t\treturn str.join(\"&\")\r\n\t}\r\n\tfunction parseQueryString(str) {\r\n\t\tif (str.charAt(0) === \"?\") str = str.substring(1);\r\n\t\t\r\n\t\tvar pairs = str.split(\"&\"), params = {};\r\n\t\tfor (var i = 0, len = pairs.length; i < len; i++) {\r\n\t\t\tvar pair = pairs[i].split(\"=\");\r\n\t\t\tvar key = decodeURIComponent(pair[0])\r\n\t\t\tvar value = pair.length == 2 ? decodeURIComponent(pair[1]) : null\r\n\t\t\tif (params[key] != null) {\r\n\t\t\t\tif (type.call(params[key]) !== ARRAY) params[key] = [params[key]]\r\n\t\t\t\tparams[key].push(value)\r\n\t\t\t}\r\n\t\t\telse params[key] = value\r\n\t\t}\r\n\t\treturn params\r\n\t}\r\n\tm.route.buildQueryString = buildQueryString\r\n\tm.route.parseQueryString = parseQueryString\r\n\t\r\n\tfunction reset(root) {\r\n\t\tvar cacheKey = getCellCacheKey(root);\r\n\t\tclear(root.childNodes, cellCache[cacheKey]);\r\n\t\tcellCache[cacheKey] = undefined\r\n\t}\r\n\r\n\tm.deferred = function () {\r\n\t\tvar deferred = new Deferred();\r\n\t\tdeferred.promise = propify(deferred.promise);\r\n\t\treturn deferred\r\n\t};\r\n\tfunction propify(promise, initialValue) {\r\n\t\tvar prop = m.prop(initialValue);\r\n\t\tpromise.then(prop);\r\n\t\tprop.then = function(resolve, reject) {\r\n\t\t\treturn propify(promise.then(resolve, reject), initialValue)\r\n\t\t};\r\n\t\treturn prop\r\n\t}\r\n\t//Promiz.mithril.js | Zolmeister | MIT\r\n\t//a modified version of Promiz.js, which does not conform to Promises/A+ for two reasons:\r\n\t//1) `then` callbacks are called synchronously (because setTimeout is too slow, and the setImmediate polyfill is too big\r\n\t//2) throwing subclasses of Error cause the error to be bubbled up instead of triggering rejection (because the spec does not account for the important use case of default browser error handling, i.e. message w/ line number)\r\n\tfunction Deferred(successCallback, failureCallback) {\r\n\t\tvar RESOLVING = 1, REJECTING = 2, RESOLVED = 3, REJECTED = 4;\r\n\t\tvar self = this, state = 0, promiseValue = 0, next = [];\r\n\r\n\t\tself[\"promise\"] = {};\r\n\r\n\t\tself[\"resolve\"] = function(value) {\r\n\t\t\tif (!state) {\r\n\t\t\t\tpromiseValue = value;\r\n\t\t\t\tstate = RESOLVING;\r\n\r\n\t\t\t\tfire()\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t};\r\n\r\n\t\tself[\"reject\"] = function(value) {\r\n\t\t\tif (!state) {\r\n\t\t\t\tpromiseValue = value;\r\n\t\t\t\tstate = REJECTING;\r\n\r\n\t\t\t\tfire()\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t};\r\n\r\n\t\tself.promise[\"then\"] = function(successCallback, failureCallback) {\r\n\t\t\tvar deferred = new Deferred(successCallback, failureCallback);\r\n\t\t\tif (state === RESOLVED) {\r\n\t\t\t\tdeferred.resolve(promiseValue)\r\n\t\t\t}\r\n\t\t\telse if (state === REJECTED) {\r\n\t\t\t\tdeferred.reject(promiseValue)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnext.push(deferred)\r\n\t\t\t}\r\n\t\t\treturn deferred.promise\r\n\t\t};\r\n\r\n\t\tfunction finish(type) {\r\n\t\t\tstate = type || REJECTED;\r\n\t\t\tnext.map(function(deferred) {\r\n\t\t\t\tstate === RESOLVED && deferred.resolve(promiseValue) || deferred.reject(promiseValue)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tfunction thennable(then, successCallback, failureCallback, notThennableCallback) {\r\n\t\t\tif (((promiseValue != null && type.call(promiseValue) === OBJECT) || typeof promiseValue === FUNCTION) && typeof then === FUNCTION) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// count protects against abuse calls from spec checker\r\n\t\t\t\t\tvar count = 0;\r\n\t\t\t\t\tthen.call(promiseValue, function(value) {\r\n\t\t\t\t\t\tif (count++) return;\r\n\t\t\t\t\t\tpromiseValue = value;\r\n\t\t\t\t\t\tsuccessCallback()\r\n\t\t\t\t\t}, function (value) {\r\n\t\t\t\t\t\tif (count++) return;\r\n\t\t\t\t\t\tpromiseValue = value;\r\n\t\t\t\t\t\tfailureCallback()\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tm.deferred.onerror(e);\r\n\t\t\t\t\tpromiseValue = e;\r\n\t\t\t\t\tfailureCallback()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnotThennableCallback()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction fire() {\r\n\t\t\t// check if it's a thenable\r\n\t\t\tvar then;\r\n\t\t\ttry {\r\n\t\t\t\tthen = promiseValue && promiseValue.then\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tm.deferred.onerror(e);\r\n\t\t\t\tpromiseValue = e;\r\n\t\t\t\tstate = REJECTING;\r\n\t\t\t\treturn fire()\r\n\t\t\t}\r\n\t\t\tthennable(then, function() {\r\n\t\t\t\tstate = RESOLVING;\r\n\t\t\t\tfire()\r\n\t\t\t}, function() {\r\n\t\t\t\tstate = REJECTING;\r\n\t\t\t\tfire()\r\n\t\t\t}, function() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (state === RESOLVING && typeof successCallback === FUNCTION) {\r\n\t\t\t\t\t\tpromiseValue = successCallback(promiseValue)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (state === REJECTING && typeof failureCallback === \"function\") {\r\n\t\t\t\t\t\tpromiseValue = failureCallback(promiseValue);\r\n\t\t\t\t\t\tstate = RESOLVING\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tm.deferred.onerror(e);\r\n\t\t\t\t\tpromiseValue = e;\r\n\t\t\t\t\treturn finish()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (promiseValue === self) {\r\n\t\t\t\t\tpromiseValue = TypeError();\r\n\t\t\t\t\tfinish()\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthennable(then, function () {\r\n\t\t\t\t\t\tfinish(RESOLVED)\r\n\t\t\t\t\t}, finish, function () {\r\n\t\t\t\t\t\tfinish(state === RESOLVING && RESOLVED)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tm.deferred.onerror = function(e) {\r\n\t\tif (type.call(e) === \"[object Error]\" && !e.constructor.toString().match(/ Error/)) throw e\r\n\t};\r\n\r\n\tm.sync = function(args) {\r\n\t\tvar method = \"resolve\";\r\n\t\tfunction synchronizer(pos, resolved) {\r\n\t\t\treturn function(value) {\r\n\t\t\t\tresults[pos] = value;\r\n\t\t\t\tif (!resolved) method = \"reject\";\r\n\t\t\t\tif (--outstanding === 0) {\r\n\t\t\t\t\tdeferred.promise(results);\r\n\t\t\t\t\tdeferred[method](results)\r\n\t\t\t\t}\r\n\t\t\t\treturn value\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar deferred = m.deferred();\r\n\t\tvar outstanding = args.length;\r\n\t\tvar results = new Array(outstanding);\r\n\t\tif (args.length > 0) {\r\n\t\t\tfor (var i = 0; i < args.length; i++) {\r\n\t\t\t\targs[i].then(synchronizer(i, true), synchronizer(i, false))\r\n\t\t\t}\r\n\t\t}\r\n\t\telse deferred.resolve([]);\r\n\r\n\t\treturn deferred.promise\r\n\t};\r\n\tfunction identity(value) {return value}\r\n\r\n\tfunction ajax(options) {\r\n\t\tif (options.dataType && options.dataType.toLowerCase() === \"jsonp\") {\r\n\t\t\tvar callbackKey = \"mithril_callback_\" + new Date().getTime() + \"_\" + (Math.round(Math.random() * 1e16)).toString(36);\r\n\t\t\tvar script = $document.createElement(\"script\");\r\n\r\n\t\t\twindow[callbackKey] = function(resp) {\r\n\t\t\t\tscript.parentNode.removeChild(script);\r\n\t\t\t\toptions.onload({\r\n\t\t\t\t\ttype: \"load\",\r\n\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\tresponseText: resp\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\twindow[callbackKey] = undefined\r\n\t\t\t};\r\n\r\n\t\t\tscript.onerror = function(e) {\r\n\t\t\t\tscript.parentNode.removeChild(script);\r\n\r\n\t\t\t\toptions.onerror({\r\n\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\tstatus: 500,\r\n\t\t\t\t\t\tresponseText: JSON.stringify({error: \"Error making jsonp request\"})\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\twindow[callbackKey] = undefined;\r\n\r\n\t\t\t\treturn false\r\n\t\t\t};\r\n\r\n\t\t\tscript.onload = function(e) {\r\n\t\t\t\treturn false\r\n\t\t\t};\r\n\r\n\t\t\tscript.src = options.url\r\n\t\t\t\t+ (options.url.indexOf(\"?\") > 0 ? \"&\" : \"?\")\r\n\t\t\t\t+ (options.callbackKey ? options.callbackKey : \"callback\")\r\n\t\t\t\t+ \"=\" + callbackKey\r\n\t\t\t\t+ \"&\" + buildQueryString(options.data || {});\r\n\t\t\t$document.body.appendChild(script)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar xhr = new window.XMLHttpRequest;\r\n\t\t\txhr.open(options.method, options.url, true, options.user, options.password);\r\n\t\t\txhr.onreadystatechange = function() {\r\n\t\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) options.onload({type: \"load\", target: xhr});\r\n\t\t\t\t\telse options.onerror({type: \"error\", target: xhr})\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (options.serialize === JSON.stringify && options.data && options.method !== \"GET\") {\r\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\r\n\t\t\t}\r\n\t\t\tif (options.deserialize === JSON.parse) {\r\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\");\r\n\t\t\t}\r\n\t\t\tif (typeof options.config === FUNCTION) {\r\n\t\t\t\tvar maybeXhr = options.config(xhr, options);\r\n\t\t\t\tif (maybeXhr != null) xhr = maybeXhr\r\n\t\t\t}\r\n\r\n\t\t\tvar data = options.method === \"GET\" || !options.data ? \"\" : options.data\r\n\t\t\tif (data && (type.call(data) != STRING && data.constructor != window.FormData)) {\r\n\t\t\t\tthrow \"Request data should be either be a string or FormData. Check the `serialize` option in `m.request`\";\r\n\t\t\t}\r\n\t\t\txhr.send(data);\r\n\t\t\treturn xhr\r\n\t\t}\r\n\t}\r\n\tfunction bindData(xhrOptions, data, serialize) {\r\n\t\tif (xhrOptions.method === \"GET\" && xhrOptions.dataType != \"jsonp\") {\r\n\t\t\tvar prefix = xhrOptions.url.indexOf(\"?\") < 0 ? \"?\" : \"&\";\r\n\t\t\tvar querystring = buildQueryString(data);\r\n\t\t\txhrOptions.url = xhrOptions.url + (querystring ? prefix + querystring : \"\")\r\n\t\t}\r\n\t\telse xhrOptions.data = serialize(data);\r\n\t\treturn xhrOptions\r\n\t}\r\n\tfunction parameterizeUrl(url, data) {\r\n\t\tvar tokens = url.match(/:[a-z]\\w+/gi);\r\n\t\tif (tokens && data) {\r\n\t\t\tfor (var i = 0; i < tokens.length; i++) {\r\n\t\t\t\tvar key = tokens[i].slice(1);\r\n\t\t\t\turl = url.replace(tokens[i], data[key]);\r\n\t\t\t\tdelete data[key]\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn url\r\n\t}\r\n\r\n\tm.request = function(xhrOptions) {\r\n\t\tif (xhrOptions.background !== true) m.startComputation();\r\n\t\tvar deferred = new Deferred();\r\n\t\tvar isJSONP = xhrOptions.dataType && xhrOptions.dataType.toLowerCase() === \"jsonp\";\r\n\t\tvar serialize = xhrOptions.serialize = isJSONP ? identity : xhrOptions.serialize || JSON.stringify;\r\n\t\tvar deserialize = xhrOptions.deserialize = isJSONP ? identity : xhrOptions.deserialize || JSON.parse;\r\n\t\tvar extract = isJSONP ? function(jsonp) {return jsonp.responseText} : xhrOptions.extract || function(xhr) {\r\n\t\t\treturn xhr.responseText.length === 0 && deserialize === JSON.parse ? null : xhr.responseText\r\n\t\t};\r\n\t\txhrOptions.method = (xhrOptions.method || 'GET').toUpperCase();\r\n\t\txhrOptions.url = parameterizeUrl(xhrOptions.url, xhrOptions.data);\r\n\t\txhrOptions = bindData(xhrOptions, xhrOptions.data, serialize);\r\n\t\txhrOptions.onload = xhrOptions.onerror = function(e) {\r\n\t\t\ttry {\r\n\t\t\t\te = e || event;\r\n\t\t\t\tvar unwrap = (e.type === \"load\" ? xhrOptions.unwrapSuccess : xhrOptions.unwrapError) || identity;\r\n\t\t\t\tvar response = unwrap(deserialize(extract(e.target, xhrOptions)), e.target);\r\n\t\t\t\tif (e.type === \"load\") {\r\n\t\t\t\t\tif (type.call(response) === ARRAY && xhrOptions.type) {\r\n\t\t\t\t\t\tfor (var i = 0; i < response.length; i++) response[i] = new xhrOptions.type(response[i])\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (xhrOptions.type) response = new xhrOptions.type(response)\r\n\t\t\t\t}\r\n\t\t\t\tdeferred[e.type === \"load\" ? \"resolve\" : \"reject\"](response)\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tm.deferred.onerror(e);\r\n\t\t\t\tdeferred.reject(e)\r\n\t\t\t}\r\n\t\t\tif (xhrOptions.background !== true) m.endComputation()\r\n\t\t};\r\n\t\tajax(xhrOptions);\r\n\t\tdeferred.promise = propify(deferred.promise, xhrOptions.initialValue);\r\n\t\treturn deferred.promise\r\n\t};\r\n\r\n\t//testing API\r\n\tm.deps = function(mock) {\r\n\t\tinitialize(window = mock || window);\r\n\t\treturn window;\r\n\t};\r\n\t//for internal testing only, do not use `m.deps.factory`\r\n\tm.deps.factory = app;\r\n\r\n\treturn m\r\n})(typeof window != \"undefined\" ? window : {});\r\n\r\nif (typeof module != \"undefined\" && module !== null && module.exports) module.exports = m;\r\nelse if (typeof define === \"function\" && define.amd) define(function() {return m});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/mithril/mithril.js\n ** module id = 52\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 53\n ** module chunks = 0\n **/","import './Menu.scss';\r\nimport roster from '../../service/roster.js';\r\nimport router from '../../service/router.js';\r\nimport lang from '../../service/lang.js';\r\nimport m from 'mithril';\r\n\r\nfunction both(f1, f2){\r\n\treturn () => {\r\n\t\tf1();\r\n\t\tf2();\r\n\t};\r\n}\r\n\r\nconst Menu = {\r\n\tcontroller(args){\r\n\t\tthis.open = false;\r\n\t\tthis.toggle = () => {\r\n\t\t\tthis.open = !this.open;\r\n\t\t};\r\n\t},\r\n\tview(ctrl, args) {\r\n\t\tconst isOpen = ctrl.open;\r\n\t\tconst options = [];\r\n\t\tconst { menu } = args;\r\n\r\n\t\t// header\r\n\t\toptions.push(\r\n\t\t\t<li class=\"option--header\">\r\n\t\t\t\t{ lang.get('options') }\r\n\t\t\t</li>\r\n\t\t);\r\n\r\n\t\tif(menu){\r\n\t\t\tif(menu.header){\r\n\t\t\t\tconst icon = menu.header.icon && (\r\n\t\t\t\t\t<i class={ `fa fa-${ menu.header.icon }` }></i>\r\n\t\t\t\t);\r\n\t\t\t\toptions.push(\r\n\t\t\t\t\t<li class=\"option--section\">\r\n\t\t\t\t\t\t{ icon }\r\n\t\t\t\t\t\t{ lang.get(menu.header.title) }\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif(menu.options && menu.options.length){\r\n\t\t\t\tfor(const option of menu.options){\r\n\t\t\t\t\tconst icon = option.icon && (\r\n\t\t\t\t\t\t<i class={ `fa fa-${ option.icon }` }></i>\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst onClick = option.onclick &&\r\n\t\t\t\t\t\tboth(ctrl.toggle, option.onclick) ||\r\n\t\t\t\t\t\tnull;\r\n\t\t\t\t\toptions.push(\r\n\t\t\t\t\t\t<li \r\n\t\t\t\t\t\t\tclass={ `option ${ option.selected? 'option--selected': '' }` }\r\n\t\t\t\t\t\t\tonclick={ onClick }\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{ icon }\r\n\t\t\t\t\t\t\t{ lang.get(option.title) }\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// languages\r\n\t\toptions.push(\r\n\t\t\t<li class=\"option--section\">\r\n\t\t\t\t<i class=\"fa fa-globe\"></i>\r\n\t\t\t\t{ lang.get('language') }\r\n\t\t\t</li>\r\n\t\t);\r\n\t\tfor(const id in lang.messages) {\r\n\t\t\tconst selectLanguage = lang.change.bind(lang, id);\r\n\t\t\toptions.push(\r\n\t\t\t\t<li \r\n\t\t\t\t\tclass={ `option ${ lang.current === id? 'option--selected': '' }` }\r\n\t\t\t\t\tonclick={ selectLanguage }\r\n\t\t\t\t>\r\n\t\t\t\t\t<img class=\"icon\" src={ `images/lang/${ id }.png` } />\r\n\t\t\t\t\t{ lang.messages[id].lang }\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// share\r\n\t\toptions.push(\r\n\t\t\t<li class=\"option--section\">\r\n\t\t\t\t{ lang.get('share-to') }\r\n\t\t\t</li>\r\n\t\t);\r\n\t\tfor(const id of [ 'google', 'facebook', 'twitter' ])\r\n\t\t\toptions.push(\r\n\t\t\t\t<li class=\"option\">\r\n\t\t\t\t\t{ lang.get(id) }\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div class={ `menu ${ isOpen? 'menu--open': '' }` }>\r\n\t\t\t\t<div class=\"menu--background\" onclick={ ctrl.toggle }></div>\r\n\t\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t\t<ul class=\"menu--options\">\r\n\t\t\t\t\t\t{ options }\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<div class=\"menu--button\" onclick={ ctrl.toggle }>\r\n\t\t\t\t\t\t<i class=\"fa fa-bars\"></i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Menu.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Menu.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Menu.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Menu.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/app/Menu.scss\n ** module id = 55\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".menu{position:fixed;width:100%}.menu,.menu .wrapper{pointer-events:none;top:0;right:0;height:100%}.menu .wrapper{position:absolute;width:80%;max-width:500px}.menu li,.menu ul{display:block;list-style-type:none;margin:0;padding:0}.menu .menu--button{pointer-events:auto;cursor:pointer;position:absolute;top:0;right:0;padding:8px 16px;background:#f6f6f6;color:#000;font-size:1.5em;text-shadow:0 1px 0 #fff;box-shadow:0 0 16px rgba(0,0,0,.5);transition:color .25s,text-shadow .25s,box-shadow .25s,background .25s}.menu .menu--button:hover{background:#eee}.menu .menu--options{pointer-events:auto;position:absolute;overflow:hidden;top:0;right:0;width:0;max-height:0;overflow-y:auto;opacity:.001;background:#38c;box-shadow:0 0 0 transparent;transition:opacity .25s,max-height .25s,width .25s,box-shadow .25s}.menu .menu--options .option--header,.menu .menu--options .option--section{font-family:Hanzel,Verdana,Geneva,sans-serif;font-size:1.1em;line-height:1.1em;color:#fff;text-shadow:0 1px 0 #000;text-transform:uppercase;padding:.75em}.menu .menu--options .option--header{padding:.75em}.menu .menu--options .option--section{line-height:1.3em;padding:.5em .75em;background:hsla(0,0%,100%,.1)}.menu .menu--options .option{cursor:pointer;font-family:Hanzel,Verdana,Geneva,sans-serif;font-size:1.1em;line-height:1.1em;color:#fff;padding:.5em .5em .5em 1.5em;text-shadow:0 1px 0 #000}.menu .menu--options .option.option--selected,.menu .menu--options .option:hover{background:#eee;color:#000;text-shadow:0 1px 0 #fff}.menu .menu--options .option .icon{display:inline-block;margin:-.25em .25em;width:1.3em}.menu .menu--background{pointer-events:none;position:absolute;top:0;right:0;width:100%;height:100%;background:transparent;transition:background .25s}.menu.menu--open .menu--button,.menu.menu--open .menu--button:hover{color:#fff;text-shadow:0 1px 0 #000;background:hsla(0,0%,100%,0);box-shadow:0 0 0 transparent}.menu.menu--open .menu--options{opacity:1;width:100%;max-height:100%;box-shadow:0 0 16px rgba(0,0,0,.75)}.menu.menu--open .menu--background{pointer-events:auto;background:rgba(0,0,0,.5)}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/app/Menu.scss\n ** module id = 56\n ** module chunks = 0\n **/","import './Roster.scss';\r\nimport Champion from '../Champion.jsx';\r\nimport roster from '../../service/roster.js';\r\nimport router from '../../service/router.js';\r\nimport lang from '../../service/lang.js';\r\nimport m from 'mithril';\r\n\r\nconst Roster = {\r\n\tview(ctrl, args) {\r\n\t\tconst total = roster.all().length;\r\n\t\tconst champions = roster.filter({\r\n\t\t\t// some filter\r\n\t\t});\r\n\t\tconst { selected } = args;\r\n\t\tconst handleSelect = ({ uid, stars}, event) => {\r\n\t\t\tevent.stopPropagation();\r\n\t\t\trouter.setRoute(`/roster/${ uid }/${ stars }`);\r\n\t\t};\r\n\t\tconst handleDeselect = (event) => {\r\n\t\t\tevent.stopPropagation();\r\n\t\t\trouter.setRoute('/roster')\r\n\t\t};\r\n\t\tconst isEditing = (selected, champion) => (selected && champion\r\n\t\t\t&& selected.uid === champion.attr.uid\r\n\t\t\t&& selected.stars === champion.attr.stars\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div \r\n\t\t\t\tclass={ `roster ${ selected ? 'editing': '' }` }\r\n\t\t\t\tonclick={ handleDeselect.bind(this) }\r\n\t\t\t>\r\n\t\t\t\t<div class=\"roster-header\">\r\n\t\t\t\t\t{ `${ champions.length } ${ lang.get('of') } ${ total } ${ lang.get('champions') }` }\r\n\t\t\t\t</div>\r\n\t\t\t\t{ champions.map((champion) => (\r\n\t\t\t\t\t<Champion \r\n\t\t\t\t\t\tkey={ champion.id() } \r\n\t\t\t\t\t\tchampion={ champion } \r\n\t\t\t\t\t\tisEditing={ isEditing(selected, champion) } \r\n\t\t\t\t\t\tonclick={ handleSelect.bind(this, champion.attr) } \r\n\t\t\t\t\t/>\r\n\t\t\t\t)) }\r\n\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Roster;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Roster.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Roster.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Roster.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Roster.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/page/Roster.scss\n ** module id = 58\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".roster{padding:24px}.roster.editing .champion{opacity:.25}.roster.editing .champion.editing{opacity:1}.roster .champion{transition:opacity .25s}.roster .roster-header{margin:auto;max-width:250px;background:rgba(0,0,0,.5);color:#fff;text-align:center;border-radius:5px;padding:16px;font-size:18px}.roster .clear{clear:both}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/page/Roster.scss\n ** module id = 59\n ** module chunks = 0\n **/","import './Champion.scss';\r\nimport roster from '../service/roster.js';\r\nimport lang from '../service/lang.js';\r\nimport m from 'mithril';\r\n\r\nconst Champion = {\r\n\tview(ctrl, args) {\r\n\t\tconst { uid, stars, typeId, pi } = args.champion.toJSON();\r\n\t\tconst hasClick = args.onclick  || '';\r\n\t\tconst isEditing = args.isEditing  || '';\r\n\t\tconst starImages = [];\r\n\t\tfor(let i=0; i<stars; i++)\r\n\t\t\tstarImages.push(\r\n\t        \t<img class=\"star\" src=\"images/icons/star.png\" />\r\n\t\t\t);\r\n\t\tconst name = lang.get(`champion-${ uid }-shortname`, null) || lang.get(`champion-${ uid }-name`);\r\n\t\treturn (\r\n\t\t\t<div class={ `champion champion--${ typeId } ${ isEditing && 'editing' }` }>\r\n\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t<div \r\n\t\t\t\t\t\tclass={ `inner ${ hasClick && 'clickable' }` } \r\n\t\t\t\t\t\tonclick={ args.onclick }\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img class=\"portrait\" src={ `images/champions/portrait_${ uid }.png` } />\r\n\t\t\t\t\t\t<div class=\"title\">\r\n\t\t\t\t\t\t\t<span class=\"name\">{ name }</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"stars\">\r\n\t\t\t\t\t\t\t{ starImages }\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Champion;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Champion.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./Champion.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./Champion.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./Champion.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/Champion.scss\n ** module id = 61\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".champion{display:block;position:relative;float:left;height:0%;width:16.66666%;padding-bottom:16.66666%}.champion.champion--cosmic{color:#3af}.champion.champion--tech{color:#23f}.champion.champion--mutant{color:#fa0}.champion.champion--skill{color:#f30}.champion.champion--science{color:#0a0}.champion.champion--mystic{color:#90f}.champion .container{position:absolute;width:100%;height:100%;box-sizing:border-box;padding:10px}.champion .container .inner{position:relative;width:100%;height:100%}.champion .container .inner.clickable{cursor:pointer}.champion .portrait{position:absolute;width:100%;height:100%;pointer-events:none}.champion .title{position:absolute;bottom:0;left:0;min-height:14px;background:rgba(0,0,0,.5);border-bottom:10px solid;border-top-left-radius:5px;border-top-right-radius:5px}.champion .title,.champion .title .name{width:100%;overflow:hidden;box-sizing:border-box}.champion .title .name{display:block;text-align:center;padding:0 3px;white-space:nowrap;text-overflow:ellipsis;color:#f6f6f6;font-family:Hanzel,Verdana,Geneva,sans-serif;font-size:1em;text-transform:uppercase;text-shadow:0 1px 0 #000}@media (max-width:355px){.champion .title .name{font-size:.6em;line-height:1.5em}}@media (max-width:800px) and (min-width:355px){.champion .title .name{font-size:.8em;line-height:1.5em}}@media (min-width:800px){.champion .title .name{font-size:1em;line-height:1.5em}}@media (max-width:355px){.champion .title{border-bottom-width:6px}}@media (max-width:800px) and (min-width:355px){.champion .title{border-bottom-width:8px}}.champion .stars{position:absolute;right:0;display:block;width:100%;text-align:center;vertical-align:text-bottom;pointer-events:none}.champion .stars .star{display:inline-block;position:relative;width:19%;margin-right:1%;padding:0}.champion .stars .star:last-child{margin-right:0}@media (max-width:355px){.champion .stars{bottom:-18%}}@media (max-width:800px) and (min-width:355px){.champion .stars{bottom:-16%}}@media (min-width:800px){.champion .stars{bottom:-15%}}@media (max-width:500px){.champion{width:33.333333333333336%;padding-bottom:33.333333333333336%}}@media (min-width:500px) and (max-width:700px){.champion{width:25%;padding-bottom:25%}}@media (min-width:700px) and (max-width:900px){.champion{width:20%;padding-bottom:20%}}@media (min-width:900px) and (max-width:1100px){.champion{width:16.6666666%;padding-bottom:16.6666666%}}@media (min-width:1100px) and (max-width:1300px){.champion{width:14.285714285714286%;padding-bottom:14.285714285714286%}}@media (min-width:1300px) and (max-width:1500px){.champion{width:12.5%;padding-bottom:12.5%}}@media (min-width:1500px) and (max-width:1700px){.champion{width:11.11111111111111%;padding-bottom:11.11111111111111%}}@media (min-width:1700px){.champion{width:10%;padding-bottom:10%}}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/Champion.scss\n ** module id = 62\n ** module chunks = 0\n **/","import './RosterAdd.scss';\r\nimport roster from '../../service/roster.js';\r\nimport lang from '../../service/lang.js';\r\nimport Champion from '../Champion.jsx';\r\nimport m from 'mithril';\r\n\r\nconst RosterAdd = {\r\n\tview(ctrl, args) {\r\n\t\tconst { stars } = args;\r\n\t\tconst champions = roster.available(stars);\r\n\t\treturn (\r\n\t\t\t<div class=\"roster-add\">\r\n\t\t\t\t<button \r\n\t\t\t\t\tclass={ `add-all ${ champions.length === 0? 'disabled': '' }` }\r\n\t\t\t\t\tonclick={ () => roster.addAll(stars) }\r\n\t\t\t\t>\r\n\t\t\t\t\t{ lang.get('add-all') }\r\n\t\t\t\t</button>\r\n\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t\t{ champions.map((champion) => (\r\n\t\t\t\t\t<Champion \r\n\t\t\t\t\t\tkey={ champion.id() } \r\n\t\t\t\t\t\tchampion={ champion } \r\n\t\t\t\t\t\tonclick={ () => roster.add(champion.attr.uid, stars) } \r\n\t\t\t\t\t/>\r\n\t\t\t\t)) }\r\n\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default RosterAdd;\r\n\n\n\n/** WEBPACK FOOTER **\n ** RosterAdd.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./RosterAdd.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./RosterAdd.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./RosterAdd.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/page/RosterAdd.scss\n ** module id = 64\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".roster-add{padding:24px}.roster-add .add-all{cursor:pointer;display:block;margin:0 auto 1em;padding:16px;border:none;border-radius:none;width:500px;max-width:90%;text-align:center;font-family:Hanzel,Verdana,Geneva,sans-serif;font-size:18px;background:#eee;color:#000;text-shadow:0 1px 1 #fff;box-shadow:0 0 16px rgba(0,0,0,.25);transition:background .25s,color .25s,text-shadow .25s}.roster-add .add-all:hover{background:#38c;color:#fff;text-shadow:0 1px 0 #000}.roster-add .add-all.disabled{cursor:default;background:#ccc;color:#999;text-shadow:0 1px 0 #fff}.roster-add .clear{clear:both}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/page/RosterAdd.scss\n ** module id = 65\n ** module chunks = 0\n **/","import './Teams.scss';\r\nimport Champion from '../Champion.jsx';\r\nimport roster from '../../service/roster.js';\r\nimport router from '../../service/router.js';\r\nimport lang from '../../service/lang.js';\r\nimport m from 'mithril';\r\n\r\nconst Roster = {\r\n\tview(ctrl, args) {\r\n\t\tconst champions = roster.all();\r\n\t\tconst { selected } = args;\r\n\t\tconst onSelect = ({ uid, stars}) => {\r\n\t\t\tconst path = `/roster/${ uid }/${ stars }`;\r\n\t\t\trouter.setRoute(path);\r\n\t\t};\r\n\t\tconst isEditing = (selected, champion) => (selected && champion\r\n\t\t\t&& selected.uid === champion.attr.uid\r\n\t\t\t&& selected.stars === champion.attr.stars\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div class=\"teams\">\r\n\t\t\t\t<div class=\"teams-header\">{ `${ 0 } ${ lang.get('teams') }` }</div>\r\n\t\t\t\t<div class=\"clear\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Roster;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Teams.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Teams.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Teams.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Teams.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/page/Teams.scss\n ** module id = 67\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".teams{padding:24px}.teams .teams-header{margin:auto;max-width:250px;background:rgba(0,0,0,.5);color:#fff;text-align:center;border-radius:5px;padding:16px;font-size:18px}.teams .clear{clear:both}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/page/Teams.scss\n ** module id = 68\n ** module chunks = 0\n **/","import './Synergy.scss';\r\nimport m from 'mithril';\r\n\r\nconst Synergy = {\r\n\tview(ctrl, args) {\r\n\t\treturn (\r\n\t\t\t<div class=\"synergy\">\r\n\t\t\t\tSYNERGY\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Synergy;\r\n\n\n\n/** WEBPACK FOOTER **\n ** Synergy.jsx\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Synergy.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Synergy.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./Synergy.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/view/page/Synergy.scss\n ** module id = 70\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/view/page/Synergy.scss\n ** module id = 71\n ** module chunks = 0\n **/"],"sourceRoot":""}